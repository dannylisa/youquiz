{"version":3,"sources":["fbase.js","routes/Auth.js","routes/CreateAccount.js","components/Quiz.js","components/SubmitAnswer.js","components/Board.js","components/Wrongs.js","components/ChangeAnswer.js","sound/sound3.mp3","routes/Home.js","routes/Draw.js","components/Router.js","Snow.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseInstance","authService","auth","dbService","firestore","storage","Auth","useState","buttonClicked","setButtonClicked","available","setAvailable","onGooleClick","a","provider","GoogleAuthProvider","signInWithPopup","useEffect","is_chrome","navigator","userAgent","toLowerCase","indexOf","vendor","is_safari","avail","alert","Grid","id","container","direction","spacing","alignItems","item","xs","Button","variant","onClick","disabled","fullWidth","color","tempElem","document","createElement","value","body","appendChild","select","execCommand","removeChild","CreateAccount","user","displayName","name","setName","phoneNumber","tel","setTel","created","setCreated","history","useHistory","onInputChange","event","target","replace","onAddUserInfoClicked","collection","add","uid","isAdmin","go","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","message","md","FormControl","InputLabel","htmlFor","Input","type","aria-describedby","onChange","Quiz","quizs","currentQuiz","showAnswer","no","question","answer","stepStyle","stepper","padding","background","className","Paper","Stepper","activeStep","alternativeLabel","style","map","quiz","index","Step","StepLabel","stepLabel","dangerouslySetInnerHTML","__html","SubmitAnswer","doc_user_id","setAnswer","onSubmitClicked","answerObj","doc","update","FormHelperText","Board","participants","corrects","size","Wrongs","wrongs","showWrongs","length","FormGroup","FormControlLabel","control","Switch","checked","label","w","idx","elevation","align","ChangeAnswer","myAnswer","setMyAnswer","newAnswer","setNewAnswer","answerCorrectionMode","setAnswerCorrectionMode","toggleAnswerCorrectionMode","prev","correctAnswer","preventDefault","where","get","dbAns","docs","data","textAlign","width","Home","currentInfo","isStarted","setQuizs","isSolved","setIsSolved","setParticipants","setCorrects","setWrongs","useSound","dingdong","play","setCurrentQuiz","setShowAnswer","bool","checkSolved","isCorrectAnswer","correctAnswerArr","includes","orderBy","quizData","currentQuizNo","onSnapshot","snapshot","answers","c","justify","to","Draw","init","setInit","quizNos","setQuizNos","quizCorrectorInfos","setQuizCorrectorInfos","setValue","initialDrawer","currentDrawQuiz","setCurrentDrawQuiz","currentDrawer","setCurrentDrawer","drewList","setDrewList","isDrawingFinished","setIsDrawingFinished","isDrew","setIsDrew","drawing","list","repetitions","x","intervalID","setInterval","Promise","resolve","reject","then","start","end","display","Math","floor","random","clearInterval","setTimeout","peopleList","num","winner","filter","useDrawMachine","draw","initiateDrawMachine","updateDrewList","dbQuizs","q","sort","correctorInfos","all","participantsObj","p","TabPanel","children","other","role","hidden","aria-labelledby","GetTable","title","content","onBlankAltText","TableContainer","component","Table","aria-label","TableHead","TableRow","t","TableCell","TableBody","row","scope","GetPeopleInfoComponent","peopleInfo","slice","AppBar","position","Tabs","newValue","indicatorColor","textColor","scrollButtons","Tab","AppRouter","isLoggedIn","hasAccount","exact","path","Snow","arr","Array","fill","Snowflake","el","i","animationDelay","toFixed","fontSize","App","setUser","setHasAccount","docUserId","setDocUserId","setCurrentInfo","onAuthStateChanged","u","userinfo","Boolean","e","newUser","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bb0e6b4e.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n    appId: process.env.REACT_APP_APP_ID,\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\n  };\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage(); ","import React, { useState, useEffect } from 'react';\nimport { firebaseInstance, authService } from '../fbase';\nimport './css/Auth.css';\nimport { Grid, Button } from '@material-ui/core';\nimport { IoLogoGoogle} from 'react-icons/io5'\n\nconst Auth = () => {\n    const [buttonClicked, setButtonClicked] = useState(false);\n    const [available, setAvailable] = useState(true);\n\n    const onGooleClick = async () => {\n        const provider = new firebaseInstance.auth.GoogleAuthProvider();\n        setButtonClicked(true)\n        await authService.signInWithPopup(provider);\n    }\n\n    useEffect(()=>{\n        const is_chrome = ((navigator.userAgent.toLowerCase().indexOf('chrome') > -1) &&(navigator.vendor.toLowerCase().indexOf(\"google\") > -1));\n        const is_safari = navigator.userAgent.toLowerCase().indexOf('safari/') > -1;\n        const avail = is_chrome || is_safari;\n        if(!avail)\n            alert(`현재 브라우저에서는 지원하지 않는 서비스입니다. 화면에 보이는 주소를 복사하셔서 구글 Chrome나 Safari앱을 통해 접속해 주시기 바랍니다.`);\n        setAvailable(avail);\n    }, [])\n    \n\n    const copyURL = () => {\n        const tempElem = document.createElement('textarea');\n        tempElem.value = \"dannylisa.github.io/youquiz/\";  \n        document.body.appendChild(tempElem);\n        tempElem.select();\n        document.execCommand(\"copy\");\n        document.body.removeChild(tempElem);\n        alert('URL이 복사되었습니다.');\n    }\n    \n    return (\n    <>\n    <Grid id=\"auth-button\" container direction=\"row\" spacing={1} alignItems=\"center\">\n        {/* <Grid item xs={12}>\n            <img src='../img/logo.jpeg' alt=\"Love Came Down\"/>\n        </Grid> */}\n        <Grid item xs={12}>\n            <Button \n                variant=\"outlined\" \n                onClick={onGooleClick} \n                disabled={!available}\n                fullWidth> \n                <IoLogoGoogle/> &nbsp; 구글아이디로 로그인\n            </Button>\n        </Grid>\n        {\n            !available &&\n            <>\n                <Grid item xs={12}>\n                    <h4>현재 브라우저에서는 지원하지 않는 서비스입니다.</h4>\n                    <h4>Google Chrome이나 Safari 앱을 통해 접속해 주시기 바랍니다.</h4>\n                    <h4>아래 버튼을 클릭하면 자동으로 URL이 클립보드에 복사됩니다.</h4>\n                </Grid>\n                <Grid item xs={12}>\n                    <Button \n                        color=\"primary\" \n                        variant=\"contained\"\n                        onClick={copyURL}\n                        fullWidth>\n                        복사\n                    </Button>\n                </Grid>\n            </>\n        }\n        { buttonClicked &&\n            <Grid item xs={12}>\n                <h2>잠시 기다려주세요...</h2>\n            </Grid>\n        }\n    </Grid>\n    </>\n    )\n}\n\nexport default Auth","import React, {useState} from  'react';\nimport { Grid, Input, FormControl, InputLabel, Button, Snackbar} from '@material-ui/core';\nimport { dbService } from '../fbase';\nimport {useHistory} from 'react-router-dom';\n\nconst CreateAccount = ({user}) => {\n    const [name, setName] = useState(user.displayName);\n    const [tel, setTel] = useState(user.phoneNumber || '');\n    const [created, setCreated] = useState(false);\n    const history = useHistory();\n\n    const onInputChange = (event) => {\n        const {target: {name, value}} = event;\n        if(name===\"name\")\n            setName(value);\n        else if(name===\"tel\")\n            setTel(value.replace('-','') );\n    }\n    const onAddUserInfoClicked = async () => {\n        await dbService.collection('userinfo').add({\n            uid: user.uid,\n            name,\n            tel,\n            isAdmin: false\n        });\n        alert('가입이 완료되었습니다.');\n        setCreated(true);\n        history.go(0);\n    }\n\n    return (\n        <>\n        { created ? \n            <Snackbar\n            anchorOrigin={{vertical: 'bottom',horizontal: 'left',}}\n            open={true}\n            autoHideDuration={6000}\n            message=\"새로고침하면 퀴즈 페이지로 이동됩니다.\"\n        />\n        :\n            <form id=\"auth-form\">\n            <Grid container direction=\"row\" spacing={2} alignItems=\"center\">\n                <Grid item xs={12}>\n                    <h2> 이름과 전화번호를 입력해주세요. 이 정보는 추첨을 통해 선물을 보내드리기 위한 정보로, 꼭 입력하지 않아도 됩니다.  </h2>\n                </Grid>\n                <Grid item xs={12} md={5}>\n                    <FormControl>\n                        <InputLabel htmlFor=\"name-input\">이름</InputLabel>\n                        <Input id=\"name-input\" type=\"text\" aria-describedby=\"name-helper\" name=\"name\" onChange={onInputChange} value={name}/>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12} md={5}>\n                    <FormControl>\n                        <InputLabel htmlFor=\"tel-input\">전화번호</InputLabel>\n                        <Input id=\"tel-input\" type=\"tel\" aria-describedby=\"tel-helper\" name=\"tel\" onChange={onInputChange} value={tel}/>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12} md={2}>\n                    <Button onClick={onAddUserInfoClicked} variant=\"contained\" color=\"primary\">확인</Button>\n                </Grid>\n            </Grid>\n        </form>\n        }\n        </>\n    )  \n}\n\nexport default CreateAccount;","import React from 'react';\nimport { Paper, Stepper, Step, StepLabel } from '@material-ui/core';\nimport { IoBagCheckSharp, IoBagCheckOutline } from 'react-icons/io5'\n\nconst Quiz = ({quizs, currentQuiz, showAnswer}) => {\n    const {no, question, answer} = quizs[currentQuiz];\n    const stepStyle={\n        stepper:{\n            padding:\"1%\",\n            background:\"inherit\",\n        }\n    }\n    return (\n        <>\n        <div className=\"christmas-striped top\"></div>\n        <Paper id=\"quiz\" variant=\"outlined\">\n            <div className=\"quiz-timeline\">\n                <Stepper activeStep={currentQuiz} alternativeLabel style={stepStyle.stepper}>\n                    {quizs.map((quiz, index) => (\n                    <Step key={index}>\n                        <StepLabel \n                            style={stepStyle.stepLabel}/>\n                    </Step>\n                    ))}\n                </Stepper>\n            </div>\n            <div className=\"title\"> Q{no}. </div>\n            <div className=\"question\" dangerouslySetInnerHTML={ {__html: question}}></div>\n            <div className=\"answer\">\n                정답 : &nbsp;\n                { showAnswer ? answer[0] : <><span className=\"loader\"></span>&nbsp;&nbsp;</>}\n            </div>\n        </Paper>\n        <div className=\"christmas-striped bottom\"></div>\n    </>\n    )\n}\n\nexport default Quiz;","import React, { useState } from 'react';\nimport {Paper, Grid, Button, FormControl, Input, InputLabel, FormHelperText} from '@material-ui/core';\nimport { dbService } from '../fbase';\n\nconst SubmitAnswer = ({no, user, doc_user_id}) => {\n    const {uid, name, tel} = user;\n    const [answer, setAnswer] = useState('');\n    const onInputChange = event => {\n        const {target:{value}} = event;\n        setAnswer(value)\n    }\n    const onSubmitClicked = async () => {\n        if(answer==''){\n            alert('정답을 입력해주세요.');\n            return;\n        }\n        const answerObj = {\n            uid,\n            name,\n            tel,\n            answer\n        }\n        await dbService.collection('quiz_'+no).add(answerObj);\n        await dbService.collection('userinfo').doc(doc_user_id).update({\n            ['quiz_'+no]: true\n        })\n        alert('정답이 제출되었습니다.');\n    }\n    return(\n        <div id=\"submitAnswer\">\n            <Grid container direction=\"row\" spacing={2} alignItems=\"center\">\n                <Grid item xs={9}>\n                    <FormControl fullWidth>\n                        <InputLabel htmlFor=\"ans-input\">정답</InputLabel>\n                        <Input id=\"ans-input\" type=\"text\" aria-describedby=\"ans-helper\" name=\"answer\" onChange={onInputChange} value={answer}/>\n                        <FormHelperText id=\"ans-helper\"> 제출 후에는 변경할 수 없습니다!</FormHelperText>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={3}>\n                    <Button onClick={onSubmitClicked} fullWidth variant=\"contained\" color=\"primary\">\n                        제출\n                    </Button>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default SubmitAnswer;","import React from 'react';\nimport { IoLogoOctocat, IoCheckmarkCircleSharp } from 'react-icons/io5'\n\n\nconst Board = ({participants, corrects}) => {\n    return(\n        <>\n        <div className=\"christmas-striped top slim\"/>\n        <div id=\"board\">\n            <h4>\n                { participants && corrects ?\n                    <IoCheckmarkCircleSharp size=\"28\"/>\n                    :\n                     <IoLogoOctocat size=\"28\"/>\n                }\n                &nbsp;\n                <span>\n\n                {\n                    participants == 0 ?\n                    \"아직 참여하신 분이 없습니다. 제일 먼저 퀴즈를 풀어보세요!\"\n                    :\n                    corrects == 0 ?\n                    `참여해주신 ${participants}분 중 아직 정답자가 없습니다! 가장 먼저 정답을 맞혀봐요!`\n                    :\n                    `참여해주신 ${participants}분 중에서 ${corrects}분이 정답을 맞히셨습니다!`\n                }\n                </span>\n                \n            </h4>\n        </div>\n        <div className=\"christmas-striped bottom slim\"/>\n        </>\n    )\n}\n\nexport default Board;","import React from 'react';\nimport { Paper, Grid, FormGroup, FormControlLabel, Switch } from '@material-ui/core';\nimport {dbService} from '../fbase';\n\nconst Wrongs = ({wrongs, isAdmin, showWrongs}) => {\n    const toggleShowWrongs = () => {\n        dbService.collection('current').doc('current').update({\n            showWrongs: !showWrongs\n        })\n    }\n    return (\n        <>\n        <div className=\"christmas-striped top\"/>\n        <div id=\"wrongs\">\n            <Grid container direction=\"column\" spacing={1}>\n                <Grid item container direction=\"row\">\n                    <Grid item xs={6}>\n                        <h3>오답 {wrongs.length} </h3>\n                    </Grid>\n                    {isAdmin && <Grid item xs={6}>\n                        <FormGroup>\n                            <FormControlLabel\n                                control={<Switch checked={showWrongs} onChange={toggleShowWrongs} name=\"showWrongs\" />}\n                                label={showWrongs ? \"오답 숨기기\" : \"오답 보기\"}\n                            />\n                        </FormGroup>\n                    </Grid>}\n                </Grid>\n                {showWrongs ? wrongs.map( (w, idx) => (\n                    <Grid item key={idx} >\n                        <Paper className=\"wrongs-wrong\" variant=\"elevation\" elevation={2}>\n                            <h3> {w.answer} </h3>\n                        </Paper>\n                    </Grid>\n                    )) \n                    :<Grid item>\n                        <h4 align=\"center\">어떤 오답들이 있을까요?</h4>\n                    </Grid>\n                }\n            </Grid>\n        </div>\n        <div className=\"christmas-striped bottom\"/>\n        </>\n    )\n}\n\nexport default Wrongs;","import React, { useEffect, useState } from 'react';\nimport { Button, InputLabel, Input, FormControl } from '@material-ui/core';\nimport { dbService } from '../fbase';\n\n\nconst ChangeAnswer = ({user, no}) => {\n    const [myAnswer, setMyAnswer] = useState('');\n    const [newAnswer, setNewAnswer] = useState('');\n    const [answerCorrectionMode, setAnswerCorrectionMode] = useState(false);\n    const toggleAnswerCorrectionMode = () => setAnswerCorrectionMode( prev => !prev);\n    const onInputChange = (event) => {\n        const {target: {value}} = event;\n        setNewAnswer(value);\n    }\n    const correctAnswer = async (event) => {\n        event.preventDefault();\n        if(newAnswer==''){\n            alert('변경하실 정답을 입력해주세요.');\n            return;\n        }\n        if(newAnswer !== myAnswer){\n            const dbAns = await dbService.collection('quiz_'+no).where('uid','==',user.uid).get();\n            await dbService.collection('quiz_'+no).doc(dbAns.docs[0].id).update({\n                answer:newAnswer\n            })\n            setMyAnswer(newAnswer);\n        }\n        toggleAnswerCorrectionMode();\n    }\n    useEffect(async () => {\n        const dbAns = (await dbService.collection('quiz_'+no).where('uid','==',user.uid).get()).docs[0].data().answer;\n        setMyAnswer(dbAns);\n        setNewAnswer(dbAns);\n    }, [])\n\n    return (\n        <div className=\"already-submit-message\">\n            {\n                answerCorrectionMode ?\n                <>\n                <FormControl style={{alignItems:\"center\", textAlign:\"center\"}}>\n                    <Input id=\"correct-input\" \n                        type=\"text\" \n                        aria-describedby=\"correct-helper\" \n                        name=\"correct\"\n                        onChange={onInputChange}   \n                        value={newAnswer}\n                        style={{width:\"70%\", textAlign:\"center\"}}/>\n                </FormControl>\n                <Button onClick={correctAnswer} variant=\"contained\" color=\"secondary\" >\n                    수정\n                </Button>\n                </>\n                :\n                <>\n                <div className=\"my-answer\">\n                    <h3>내 정답 : {myAnswer}</h3>\n                </div>\n                <Button onClick={toggleAnswerCorrectionMode} variant=\"contained\" color=\"primary\">\n                    바꾸기\n                </Button>\n                </>\n            }\n        </div>\n    )\n}\n\nexport default ChangeAnswer;","export default __webpack_public_path__ + \"static/media/sound3.aceb025f.mp3\";","import React, {useEffect, useState} from 'react';\nimport { Link } from 'react-router-dom';\nimport Quiz from '../components/Quiz';\nimport { dbService } from '../fbase';\nimport SubmitAnswer from '../components/SubmitAnswer'\nimport Board from '../components/Board';\nimport Wrongs from '../components/Wrongs';\nimport { Grid, Button } from '@material-ui/core';\nimport './css/Home.css';\nimport ChangeAnswer from '../components/ChangeAnswer';\nimport useSound from 'use-sound';\nimport dingdong from '../sound/sound3.mp3';\n\nconst Home = ({user, doc_user_id, currentInfo}) => {\n    const {isAdmin} = user\n    const {currentQuiz, showAnswer, showWrongs, isStarted} = currentInfo;\n    const [quizs, setQuizs] = useState([]);\n    const [isSolved, setIsSolved] = useState(false);\n    const [participants, setParticipants] = useState(0);\n    const [corrects, setCorrects] = useState(0);\n    const [wrongs, setWrongs] = useState([]);\n    const [play] = useSound(dingdong);\n\n    const setCurrentQuiz = ( idx ) => {\n        dbService.collection('current').doc('current').update({\n            currentQuiz: idx\n        })\n    }\n    const setShowAnswer = (bool) => {\n        // bool && play();\n        dbService.collection('current').doc('current').update({\n            showAnswer: bool\n        })\n    }\n    const onPrevQuizClicked = () => {\n        setCurrentQuiz( currentQuiz - 1 );\n        setShowAnswer(false);\n        dbService.collection('current').doc('current').update({\n            showWrongs: false\n        })\n    }\n    const onNextQuizClicked = () => {\n        setCurrentQuiz( currentQuiz + 1);\n        setShowAnswer(false);\n        dbService.collection('current').doc('current').update({\n            showWrongs: false\n        })\n    }\n    const checkSolved = async () => {\n        if(!quizs.length)\n            return;\n        setIsSolved(user['quiz_'+quizs[currentQuiz].no]);\n    }\n    const onStartQuizClicked = () => {\n        dbService.collection('current').doc('current').update({\n            currentQuiz: 0,\n            isStarted: true,\n            showAnswer: false,\n            showWrongs: false\n        })\n    } \n    const isCorrectAnswer = (answer, correctAnswerArr) => correctAnswerArr.includes(answer);\n\n    useEffect( async () => {\n        const quizData = await dbService.collection('quiz').orderBy('no').get();\n        setQuizs(quizData.docs.map(doc => doc.data()));\n    }, [])\n    useEffect( () => {\n        checkSolved()\n    }, [quizs, currentQuiz, user])\n    useEffect( async () => {\n        if(!quizs.length)\n            return;\n        const currentQuizNo = quizs[currentQuiz].no;\n        const correctAnswerArr = (await dbService.collection('quiz').where('no','==',currentQuizNo).get()).docs[0].data().answer;\n        dbService.collection(\"quiz_\"+currentQuizNo).onSnapshot( snapshot => {\n            const answers = snapshot.docs.map( doc => doc.data() );\n            setParticipants(answers.length);\n            let c = [], w = [];\n            answers.map( a => {\n                isCorrectAnswer(a.answer, correctAnswerArr) ? \n                      c = [...c, a]\n                    : w = [...w, a]\n            })\n            setCorrects(c.length);\n            setWrongs(w);\n        })\n    }, [quizs, currentQuiz])\n    useEffect( () => {\n        showAnswer && play();\n    }, [showAnswer])\n\n    if(!isStarted)\n        return (\n            <>\n            <h1>\n                곧 퀴즈쇼가 시작됩니다! 잠시만 기다려 주세요~!\n            </h1>\n            { isAdmin &&\n                <Button variant=\"contained\"\n                color=\"primary\" \n                onClick={onStartQuizClicked}>\n                    퀴즈 시작\n               </Button>\n            }\n            </>\n        )\n    return (\n        <>\n        <Grid container direction=\"row\" spacing={2} alignItems=\"stretch\">\n            <Grid container item xs={12} md={8} direction=\"row\">\n                <Grid item xs={12}>\n                    {\n                        quizs.length ?\n                        <Quiz \n                            quizs={quizs}\n                            currentQuiz={currentQuiz}\n                            showAnswer={showAnswer}/> \n                        : <h6>퀴즈를 가져오는 중입니다...</h6>\n                    }\n                </Grid>\n\n                { isAdmin &&\n                    <Grid id=\"admin-button-box\" container item xs={12} direction=\"row\" justify=\"flex-end\" alignItems=\"center\">\n                        { currentQuiz > 0 && \n                            <Grid item xs={6} md={3}>\n                                <Button variant=\"contained\"\n                                 color=\"primary\" \n                                 fullWidth \n                                 onClick={onPrevQuizClicked}>\n                                     이전 문제\n                                </Button>\n                            </Grid>\n                        }\n                        <Grid item xs={6} md={3}>\n                            {   \n                                showAnswer ? \n                                    ( currentQuiz+1<quizs.length ?\n                                            <Button variant=\"contained\" \n                                                color=\"primary\" fullWidth \n                                                onClick={onNextQuizClicked}>\n                                                    다음 문제\n                                            </Button>\n                                        :\n                                            <Link to=\"/draw\">\n                                                <Button variant=\"contained\" color=\"primary\" fullWidth>\n                                                    추첨\n                                                </Button> \n                                            </Link>\n                                        )\n                                : <Button variant=\"contained\" \n                                    color=\"secondary\" \n                                    fullWidth \n                                    onClick={()=>setShowAnswer(true)}>\n                                        정답 공개\n                                    </Button>\n                            }\n                        </Grid>\n                    </Grid>\n                }\n\n                <Grid item xs={12}>\n                    {quizs.length \n                        && !showAnswer\n                        && (\n                            !isSolved ?\n                            <SubmitAnswer no={quizs[currentQuiz].no} user={user} doc_user_id={doc_user_id}/>\n                            : <ChangeAnswer user={user} no={quizs[currentQuiz].no}/>\n                        )}\n                </Grid>\n                <Grid item xs={12}>\n                    {quizs.length && \n                        <Board participants={participants} corrects={corrects}/>}\n                </Grid>\n            </Grid>\n            <Grid item xs={12} md={4}>\n                <Wrongs wrongs={wrongs} isAdmin={isAdmin} showWrongs={showWrongs}/>\n            </Grid>\n        </Grid>\n        </>\n    )\n}\n\nexport default Home;","import React, { useState, useEffect } from 'react';\nimport { Paper, Grid, Button, AppBar, Tabs, Tab, Table, \n    TableContainer, TableHead, TableBody, TableRow, TableCell } from '@material-ui/core';\nimport {IoRefresh} from 'react-icons/io5';\nimport './css/Draw.css';\nimport { dbService } from '../fbase';\n\nconst Draw = () => {\n    const [init, setInit] = useState(false);\n    const [quizNos, setQuizNos] = useState([])\n    const [quizCorrectorInfos, setQuizCorrectorInfos] = useState([]);\n    const [value, setValue]= useState(0);\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n      };\n    \n\n    const useDrawMachine = () => {\n        const initialDrawer = \"번 문제의 당첨자는 누구일까요?\";\n        const [currentDrawQuiz, setCurrentDrawQuiz] = useState(0)\n        const [currentDrawer, setCurrentDrawer] = useState(1+initialDrawer);\n        const [drewList, setDrewList] = useState([]);\n        const [isDrawingFinished, setIsDrawingFinished] = useState(false);\n        const [isDrew, setIsDrew] = useState(false);\n        const rand = (start, end) => Math.floor((Math.random() * (end-start+1)) + start);\n        const drawing = async (list, repetitions) => {\n            let x = 0;\n            let intervalID;\n            intervalID = setInterval(() => {\n                new Promise((resolve, reject) => {\n                    resolve('')\n                }).then( () => {\n                    const display = `${list[rand(0,list.length-1)].name}`;\n                    setCurrentDrawer(display);\n                    if (++x == repetitions){\n                        clearInterval(intervalID);\n                        setTimeout(()=> setIsDrawingFinished(true), 500);\n                    }\n                })\n            }, 100);\n        }\n\n        const draw = async () => {\n            setIsDrawingFinished(false);\n            const peopleList = quizCorrectorInfos[currentDrawQuiz];\n            if(!(peopleList.length))\n                return;\n            await drawing(peopleList, 20)\n            setIsDrew(true)\n        }\n        const initiateDrawMachine = (currentQuiz) => {\n            setCurrentDrawer((currentQuiz+1)+initialDrawer);\n            setCurrentDrawQuiz(currentQuiz);\n            setIsDrawingFinished(false);\n            setIsDrew(false);\n        }\n        const updateDrewList = (num, winner) => setDrewList( \n            prev => [...prev.filter(([no, name]) => no!==num),\n                     [num, winner]]\n        )\n        return [currentDrawer, currentDrawQuiz, isDrawingFinished, isDrew, draw, initiateDrawMachine, drewList, updateDrewList];\n    }\n    const [currentDrawer, currentDrawQuiz, isDrawingFinished,isDrew, draw, initiateDrawMachine, drewList, updateDrewList] = useDrawMachine();\n    \n    const isCorrectAnswer = (answer, correctAnswerArr) => correctAnswerArr.includes(answer);\n   \n    // 퀴즈별 정답자 데이터 가져오기\n    useEffect(async ()=>{\n        const quizData = await dbService.collection('quiz').orderBy('no').get();\n        const dbQuizs = quizData.docs.map(doc => doc.data());\n        setQuizNos(dbQuizs.map(q => q.no).sort());\n        \n        let correctorInfos =[];\n        await Promise.all( dbQuizs.map( async (quiz) => {\n            const {no, answer} = quiz;\n            const participantsObj = (await dbService.collection(\"quiz_\"+no).get())\n                                    .docs.map( doc => doc.data());\n            correctorInfos=[...correctorInfos, participantsObj.filter( p => isCorrectAnswer( p.answer, answer ))];\n        }))\n        setQuizCorrectorInfos(correctorInfos);\n        setInit(true)\n    },[])\n    const hideName = name => {\n        if(name ==\"\" || !name)\n            return \"익명\"\n        else if(name.length ==1)\n            return name\n        else if(name.length==2)\n            return name[0]+'*';\n        else if(name.length==3)\n            return name[0]+'*'+name[2];\n        else\n            return name[0]+'**'+name[name.length-1];\n    }\n    const hideTel = tel => {\n        if(tel ==\"\" || !tel)\n            return \"-\"\n        else if(tel.length <=4)\n            return tel\n        else\n            return '***-****-'+tel.slice(-4);\n    }\n\n    const TabPanel = ({ children, value, index, ...other }) => {\n        return (\n          <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`scrollable-auto-tabpanel-${index}`}\n            aria-labelledby={`scrollable-auto-tab-${index}`}\n            {...other}\n          >\n            {value == index && children }\n          </div>\n        );\n    }\n    const a11yProps = index =>({\n        id: `scrollable-auto-tab-${index}`,\n        'aria-controls': `scrollable-auto-tabpanel-${index}`,\n      })\n     \n    const GetTable = ({title, content, onBlankAltText}) => (\n        <TableContainer component={Paper}>\n            <Table aria-label=\"simple table\">\n            { content.length ?\n                    <>\n                    <TableHead>\n                        <TableRow>\n                            {\n                                title.map( (t, idx) => <TableCell key={idx} align=\"center\"> {t} </TableCell>)\n                            }\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {content.map((row, idx) => (\n                            <TableRow key={idx}>\n                                { row.map( (c, idx) => (\n                                        <TableCell key={idx} component=\"th\" scope=\"row\" align=\"center\">{c}</TableCell>\n                                ))}\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                    </>\n                :\n                    <TableBody>\n                        <TableRow>\n                            <TableCell align=\"center\">{onBlankAltText}</TableCell>\n                        </TableRow>\n                    </TableBody>\n                }\n            </Table>\n        </TableContainer>\n    )\n    const GetPeopleInfoComponent = ({peopleInfo}) => {\n        const title = [\"이름\", \"전화번호\"];\n        const content = peopleInfo.map( p => [p.name, hideTel(p.tel)]);\n        return GetTable({\n            title, \n            content, \n            onBlankAltText:\"정답자가 없습니다 ㅠㅠㅠㅠ\"});  \n    }\n\n    return (\n        <Grid container direction=\"row\" spacing={2} alignItems=\"flex-start\">\n            <Grid container item xs={12} md={6} spacing={1}>\n                <Grid item xs={12}>\n                {\n                    init ? \n                    <>\n                    <AppBar position=\"static\" color=\"default\">\n                        <Tabs\n                            value={currentDrawQuiz}\n                            onChange={handleChange}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            variant=\"scrollable\"\n                            scrollButtons=\"auto\"\n                            aria-label=\"scrollable auto tabs\">\n                            {\n                                quizNos.map( (no, idx) => \n                                    <Tab key={idx} label={`Quiz ${no}`}  {...a11yProps(idx)} />\n                                )\n                            }\n                        </Tabs>\n                    </AppBar>\n                    {\n                        quizNos.map((no, idx) => (\n                            <TabPanel key={idx} value={currentDrawQuiz} index={idx}>\n                                <GetPeopleInfoComponent peopleInfo={quizCorrectorInfos[idx]}/>\n                            </TabPanel>\n                        ))\n                    }\n                    </>\n                    : \"정답자 데이터를 가져오는 중입니다...\"\n                }\n                </Grid>\n            </Grid>\n            <Grid item xs={12} md={6}>\n                <div className=\"christmas-striped top\"/>\n                <div className=\"draw\">\n                    <div className=\"draw-machine\">\n                        <Paper className=\"drawer\" variant=\"elevation\" elevation={3}>\n                            <h2>{currentDrawer}</h2>\n                            {/* className={isDrawingFinished && \"finished\"} */}\n                        </Paper>\n                        <div className=\"draw-btns\">\n                            { isDrew  ?\n                                <Button \n                                    onClick={draw} \n                                    variant=\"contained\" \n                                    color=\"secondary\"\n                                    disabled={!isDrawingFinished}\n                                    >\n                                    <IoRefresh size=\"18\"/>\n                                </Button>\n                                :\n                                <Button/>\n                                }\n                            {isDrew ?\n                                <Button \n                                    onClick={()=>{\n                                        currentDrawQuiz<(quizNos.length-1) && initiateDrawMachine(currentDrawQuiz+1);\n                                        updateDrewList(currentDrawQuiz+1, currentDrawer);\n                                    }} \n                                    variant=\"contained\" \n                                    disabled={!isDrawingFinished}\n                                    color=\"primary\">\n                                    {currentDrawQuiz<quizNos.length-1 ? \"다음 추첨\" : \"확인\"}\n                                </Button>\n                            :\n                                <Button onClick={draw} variant=\"contained\" color=\"primary\">\n                                    추첨\n                                </Button>\n                            }\n                        </div>\n                    </div>\n                    <div className=\"congrats-message\">\n                        <h2 align=\"center\">{isDrawingFinished && `${currentDrawer}님, 당첨을 축하드립니다!`}</h2>\n                    </div>\n                    <div className=\"drawed-list\">\n                        <GetTable \n                            title={[\"퀴즈\", \"당첨자\"]}\n                            content={drewList}\n                            onBlankAltText=\"첫 당첨자를 곧 추첨합니다!\"\n                            />\n                    </div>\n                </div>\n                <div className=\"christmas-striped bottom\"/>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Draw;","import React from \"react\";\nimport { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport Auth from \"../routes/Auth\";\nimport CreateAccount from \"../routes/CreateAccount\";\nimport Home from \"../routes/Home\";\nimport Draw from \"../routes/Draw\";\n\nconst AppRouter = ({ isLoggedIn, user, hasAccount, doc_user_id, currentInfo }) => {\n    return (\n        <Router>\n            <Switch>\n            {isLoggedIn? (\n                hasAccount ?\n                <>\n                    <Route exact path=\"/\">\n                        <Home user={user} doc_user_id={doc_user_id} currentInfo={currentInfo}/>\n                    </Route>\n                    {\n                        user.isAdmin && \n                            <Route exact path=\"/draw\">\n                                <Draw/>\n                            </Route>\n                    }\n                    {/* <Redirect from=\"*\" to=\"/\"/> */}\n                </>\n                :\n                <>\n                    <Route exact path=\"/\">\n                        <CreateAccount user={user}/>\n                    </Route>\n                </>\n            ) \n            : (\n            <>\n                <Route exact path=\"/\">\n                    <Auth />\n                </Route>\n            </>\n            )}\n            </Switch>\n        </Router>\n    );\n};\nexport default AppRouter;","import React from 'react';\nconst Snow = ({children}) => {\n    const maxFontSize=20;\n    let arr = new Array(200).fill(0)\n\n    const Snowflake = ({id, style}) =>{\n        const flake='*';\n        return(\n          <p className='Snowflake' id={`item${id}`} style={style}>\n            {flake}\n          </p>\n        )\n    }\n\n    return (\n    <>\n    <noscript> Don't open this html dom!!!!</noscript>\n        <div id=\"snow\">\n        {\n            arr.map((el, i)=>{\n            const animationDelay = `${(Math.random()*16).toFixed(2)}s`;\n            const size = maxFontSize-10*Math.random();\n            const fontSize = `${(size > 0 ? size : .1).toFixed(2)}px`;\n                let style = {\n                    animationDelay,\n                    fontSize\n                    }\n                return <Snowflake key={i} id={i} style={style}/>;\n            })\n        }\n        </div>\n        {children}\n    </>\n    )\n}\n\nexport default Snow;","import React, { useState, useEffect } from 'react';\nimport { authService, dbService } from '../fbase';\nimport AppRouter from './Router';\nimport Snow from '../Snow';\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [user, setUser] = useState(null);\n  const [hasAccount, setHasAccount] = useState(false);\n  const [docUserId, setDocUserId] = useState('');\n  const [currentInfo, setCurrentInfo] = useState({currentQuiz:0, showWrongs:false, showAnswer:false});\n  \n  useEffect(() => {\n      authService.onAuthStateChanged( async u => {\n        if(u){\n          const userinfo = await dbService.collection('userinfo').where('uid','==',u.uid).get();\n          setHasAccount(Boolean(userinfo.docs.length))\n          try{\n            setUser(userinfo.docs[0].data());\n            setDocUserId(userinfo.docs[0].id);\n          }catch(e){\n            setUser(u)\n          }\n        }\n        else{\n          setUser(null);\n        }\n        setInit(true);\n      });\n      dbService.collection('current').doc('current').onSnapshot(data => {\n        setCurrentInfo(data.data())\n      });\n    }, [])\n    useEffect(() => {\n      if(!docUserId)\n        return;\n      dbService.collection('userinfo').doc(docUserId).onSnapshot( newUser => {\n        setUser(newUser.data());\n      })\n    },[docUserId])\n    \n    \n  return (\n    <>\n    <Snow/>\n    { init ? <AppRouter \n      isLoggedIn={Boolean(user)} \n      user={user} \n      hasAccount={hasAccount} \n      doc_user_id={docUserId}\n      currentInfo={currentInfo} /> : \"로딩중입니다!\" }\n      </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
{"version":3,"sources":["fbase.js","routes/Auth.js","routes/CreateAccount.js","components/Quiz.js","components/SubmitAnswer.js","components/Board.js","components/Wrongs.js","routes/Home.js","routes/Draw.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseInstance","authService","auth","dbService","firestore","storage","Auth","onGooleClick","a","provider","GoogleAuthProvider","signInWithPopup","Grid","id","container","direction","spacing","alignItems","item","xs","Button","variant","onClick","fullWidth","CreateAccount","user","useState","displayName","name","setName","phoneNumber","tel","setTel","created","setCreated","history","useHistory","onInputChange","event","target","value","onAddUserInfoClicked","collection","add","uid","isAdmin","alert","go","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","message","md","FormControl","InputLabel","htmlFor","Input","type","aria-describedby","onChange","color","Quiz","quiz","showAnswer","no","question","answer","Paper","className","SubmitAnswer","doc_user_id","setAnswer","onSubmitClicked","answerObj","doc","update","FormHelperText","Board","participants","corrects","size","Wrongs","wrongs","showWrongs","length","FormGroup","FormControlLabel","control","Switch","checked","label","map","w","idx","elevation","align","Home","currentInfo","currentQuiz","quizs","setQuizs","isSolved","setIsSolved","setParticipants","setCorrects","setWrongs","setCurrentQuiz","setShowAnswer","bool","checkSolved","isCorrectAnswer","correctAnswerArr","includes","useEffect","orderBy","get","quizData","docs","data","currentQuizNo","where","onSnapshot","snapshot","answers","c","justify","to","style","textDecoration","Draw","AppRouter","isLoggedIn","hasAccount","exact","path","from","App","init","setInit","setUser","setHasAccount","docUserId","setDocUserId","setCurrentInfo","onAuthStateChanged","u","userinfo","Boolean","e","newUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAgBAA,IAASC,cAXc,CACnBC,OAAQC,0CACRC,WAAYD,gCACZE,YAAaF,uCACbG,UAAWH,gBACXI,cAAeJ,4BACfK,kBAAmBL,eACnBM,MAAON,4CACPO,cAAeP,iBAKZ,IAAMQ,EAAmBX,IACnBY,EAAcZ,IAASa,OACvBC,EAAYd,IAASe,Y,GACJf,IAASgB,U,iDCExBC,EAjBF,WACT,IAAMC,EAAY,uCAAG,4BAAAC,EAAA,6DACXC,EAAW,IAAIT,EAAiBE,KAAKQ,mBAD1B,SAEXT,EAAYU,gBAAgBF,GAFjB,2CAAH,qDAKlB,OACA,mCACA,cAACG,EAAA,EAAD,CAAMC,GAAG,cAAcC,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAGC,WAAW,SAAxE,SACI,cAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIF,WAAW,SAA9B,SACI,eAACG,EAAA,EAAD,CAAQC,QAAQ,WAAWC,QAASf,EAAcgB,WAAS,EAA3D,cAA6D,cAAC,IAAD,IAA7D,0E,oCCmDGC,EA9DO,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAAU,EACNC,mBAASD,EAAKE,aADR,mBACvBC,EADuB,KACjBC,EADiB,OAERH,mBAASD,EAAKK,aAAe,IAFrB,mBAEvBC,EAFuB,KAElBC,EAFkB,OAGAN,oBAAS,GAHT,mBAGvBO,EAHuB,KAGdC,EAHc,KAIxBC,EAAUC,cAEVC,EAAgB,SAACC,GAAW,IAAD,EACGA,EAAzBC,OAASX,EADa,EACbA,KAAMY,EADO,EACPA,MACZ,SAAPZ,EACCC,EAAQW,GACG,QAAPZ,GACJI,EAAOQ,IAETC,EAAoB,uCAAG,sBAAAjC,EAAA,sEACnBL,EAAUuC,WAAW,YAAYC,IAAI,CACvCC,IAAKnB,EAAKmB,IACVhB,OACAG,MACAc,SAAS,IALY,OAOzBC,MAAM,kEACNZ,GAAW,GACXC,EAAQY,GAAG,GATc,2CAAH,qDAY1B,OACI,mCACEd,EACE,cAACe,EAAA,EAAD,CACAC,aAAc,CAACC,SAAU,SAASC,WAAY,QAC9CC,MAAM,EACNC,iBAAkB,IAClBC,QAAQ,+GAGR,sBAAMzC,GAAG,YAAT,SACA,eAACD,EAAA,EAAD,CAAME,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAGC,WAAW,SAAvD,UACI,cAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAf,SACI,kVAEJ,cAACP,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIoC,GAAI,EAAvB,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,aAApB,0BACA,cAACC,EAAA,EAAD,CAAO9C,GAAG,aAAa+C,KAAK,OAAOC,mBAAiB,cAAcjC,KAAK,OAAOkC,SAAUzB,EAAeG,MAAOZ,SAGtH,cAAChB,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIoC,GAAI,EAAvB,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,YAApB,sCACA,cAACC,EAAA,EAAD,CAAO9C,GAAG,YAAY+C,KAAK,MAAMC,mBAAiB,aAAajC,KAAK,MAAMkC,SAAUzB,EAAeG,MAAOT,SAGlH,cAACnB,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIoC,GAAI,EAAvB,SACI,cAACnC,EAAA,EAAD,CAAQE,QAASmB,EAAsBpB,QAAQ,YAAY0C,MAAM,UAAjE,oC,iBCzCLC,EAdF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,WACVC,EAAwBF,EAAxBE,GAAIC,EAAoBH,EAApBG,SAAUC,EAAUJ,EAAVI,OACrB,OACI,eAACC,EAAA,EAAD,CAAOzD,GAAG,OAAOQ,QAAQ,WAAzB,UACI,sBAAKkD,UAAU,QAAf,eAA0BJ,EAA1B,QACA,sBAAKI,UAAU,WAAf,cAA4BH,EAA5B,OACA,sBAAKG,UAAU,SAAf,oCAEML,EAAaG,EAAO,GAAK,a,iBCgC5BG,EAvCM,SAAC,GAA6B,IAA5BL,EAA2B,EAA3BA,GAAI1C,EAAuB,EAAvBA,KAAMgD,EAAiB,EAAjBA,YACtB7B,EAAanB,EAAbmB,IAAKhB,EAAQH,EAARG,KADkC,EAElBF,mBAAS,IAFS,mBAEvC2C,EAFuC,KAE/BK,EAF+B,KAOxCC,EAAe,uCAAG,4BAAAnE,EAAA,6DACdoE,EAAY,CACdhC,MACAhB,OACAyC,UAJgB,SAMdlE,EAAUuC,WAAW,QAAQyB,GAAIxB,IAAIiC,GANvB,uBAOdzE,EAAUuC,WAAW,YAAYmC,IAAIJ,GAAaK,OAAlD,eACD,QAAQX,GAAK,IARE,OAUpBrB,MAAM,kEAVc,2CAAH,qDAYrB,OACI,cAACwB,EAAA,EAAD,CAAOzD,GAAG,eAAeQ,QAAQ,WAAjC,SACI,eAACT,EAAA,EAAD,CAAME,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAGC,WAAW,SAAvD,UACI,cAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAf,SACI,eAACqC,EAAA,EAAD,CAAajC,WAAS,EAAtB,UACI,cAACkC,EAAA,EAAD,CAAYC,QAAQ,YAApB,0BACA,cAACC,EAAA,EAAD,CAAO9C,GAAG,YAAY+C,KAAK,OAAOC,mBAAiB,aAAajC,KAAK,SAASkC,SAtB5E,SAAAxB,GAAU,IACbE,EAAUF,EAAlBC,OAAQC,MACfkC,EAAUlC,IAoB6GA,MAAO6B,IAC9G,cAACU,EAAA,EAAD,CAAgBlE,GAAG,aAAnB,uGAGR,cAACD,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAf,SACI,cAACC,EAAA,EAAD,CAAQE,QAASqD,EAAiBpD,WAAS,EAACF,QAAQ,YAAY0C,MAAM,UAAtE,kCCPLiB,EArBD,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,SAC1B,OACI,cAACZ,EAAA,EAAD,CAAOzD,GAAG,QAAQQ,QAAQ,WAA1B,SACI,eAACT,EAAA,EAAD,CAAME,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAzC,UACI,cAACJ,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAf,SACI,sBAAKoD,UAAU,cAAf,UACI,cAAC,IAAD,CAAeY,KAAK,OADxB,qBAEQF,OAGZ,cAACrE,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAf,SACI,sBAAKoD,UAAU,cAAf,UACI,cAAC,IAAD,CAAwBY,KAAK,OADjC,qBAEQD,a,2BCwBbE,EAvCA,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,OAAQxC,EAAyB,EAAzBA,QAASyC,EAAgB,EAAhBA,WAM9B,OACI,cAAChB,EAAA,EAAD,CAAOzD,GAAG,SAASQ,QAAQ,WAA3B,SACI,eAACT,EAAA,EAAD,CAAME,WAAS,EAACC,UAAU,SAASC,QAAS,EAA5C,UACI,eAACJ,EAAA,EAAD,CAAMM,MAAI,EAACJ,WAAS,EAACC,UAAU,MAA/B,UACI,cAACH,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAf,SACI,+CAAQkE,EAAOE,OAAf,SAEH1C,GAAW,cAACjC,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAf,SACR,cAACqE,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIC,QAAS,cAACC,EAAA,EAAD,CAAQC,QAASN,EAAYxB,SAfzC,WACrB3D,EAAUuC,WAAW,WAAWmC,IAAI,WAAWC,OAAO,CAClDQ,YAAaA,KAayE1D,KAAK,eACvEiE,MAAOP,EAAa,kCAAW,qCAK9CA,EAAaD,EAAOS,KAAK,SAACC,EAAGC,GAAJ,OACtB,cAACpF,EAAA,EAAD,CAAMM,MAAI,EAAV,SACI,cAACoD,EAAA,EAAD,CAAOC,UAAU,eAAelD,QAAQ,YAAY4E,UAAW,EAA/D,SACI,mCAAMF,EAAE1B,OAAR,UAFQ2B,MAMf,cAACpF,EAAA,EAAD,CAAMM,MAAI,EAAV,SACG,oBAAIgF,MAAM,SAAV,qFCoHTC,G,MA5IF,SAAC,GAAsC,IAArC1E,EAAoC,EAApCA,KAAMgD,EAA8B,EAA9BA,YAAa2B,EAAiB,EAAjBA,YACvBvD,EAAWpB,EAAXoB,QACAwD,EAAuCD,EAAvCC,YAAanC,EAA0BkC,EAA1BlC,WAAYoB,EAAcc,EAAdd,WAFe,EAGrB5D,mBAAS,IAHY,mBAGxC4E,EAHwC,KAGjCC,EAHiC,OAIf7E,oBAAS,GAJM,mBAIxC8E,EAJwC,KAI9BC,EAJ8B,OAKP/E,mBAAS,GALF,mBAKxCuD,EALwC,KAK1ByB,EAL0B,OAMfhF,mBAAS,GANM,mBAMxCwD,EANwC,KAM9ByB,EAN8B,OAOnBjF,mBAAS,IAPU,mBAOxC2D,EAPwC,KAOhCuB,EAPgC,KASzCC,EAAiB,SAAEb,GACrB7F,EAAUuC,WAAW,WAAWmC,IAAI,WAAWC,OAAO,CAClDuB,YAAaL,KAGfc,EAAgB,SAACC,GACnB5G,EAAUuC,WAAW,WAAWmC,IAAI,WAAWC,OAAO,CAClDZ,WAAY6C,KAiBdC,EAAW,uCAAG,sBAAAxG,EAAA,yDACZ8F,EAAMf,OADM,iDAGhBkB,EAAYhF,EAAK,QAAQ6E,EAAMD,GAAalC,KAH5B,2CAAH,qDAKX8C,EAAkB,SAAC5C,EAAQ6C,GAAT,OAA8BA,EAAiBC,SAAS9C,IA4BhF,OA1BA+C,oBAAS,sBAAE,4BAAA5G,EAAA,sEACgBL,EAAUuC,WAAW,QAAQ2E,QAAQ,MAAMC,MAD3D,OACDC,EADC,OAEPhB,EAASgB,EAASC,KAAK1B,KAAI,SAAAjB,GAAG,OAAIA,EAAI4C,WAF/B,2CAGR,IACHL,qBAAW,WACPJ,MACD,CAACV,EAAOD,EAAa5E,IACxB2F,oBAAS,sBAAE,8BAAA5G,EAAA,yDACH8F,EAAMf,OADH,wDAGDmC,EAAgBpB,EAAMD,GAAalC,GAHlC,SAIyBhE,EAAUuC,WAAW,QAAQiF,MAAM,KAAK,KAAKD,GAAeJ,MAJrF,OAIDJ,EAJC,OAI4FM,KAAK,GAAGC,OAAOpD,OAClHlE,EAAUuC,WAAW,QAAQgF,GAAeE,YAAY,SAAAC,GACpD,IAAMC,EAAUD,EAASL,KAAK1B,KAAK,SAAAjB,GAAG,OAAIA,EAAI4C,UAC9Cf,EAAgBoB,EAAQvC,QACxB,IAAIwC,EAAI,GAAIhC,EAAI,GAChB+B,EAAQhC,KAAK,SAAAtF,GACTyG,EAAgBzG,EAAE6D,OAAQ6C,GACpBa,EAAC,sBAAOA,GAAP,CAAUvH,IACXuF,EAAC,sBAAOA,GAAP,CAAUvF,OAErBmG,EAAYoB,EAAExC,QACdqB,EAAUb,MAfP,2CAiBR,CAACO,EAAOD,IAGP,mCACA,eAACzF,EAAA,EAAD,CAAME,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAGC,WAAW,UAAvD,UACI,eAACL,EAAA,EAAD,CAAME,WAAS,EAACI,MAAI,EAACC,GAAI,GAAIoC,GAAI,EAAGxC,UAAU,MAAMC,QAAQ,OAA5D,UACI,cAACJ,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAf,SAEQmF,EAAMf,OACN,cAAC,EAAD,CAAMtB,KAAMqC,EAAMD,GAAcnC,WAAYA,IAC1C,2GAIRrB,GACE,eAACjC,EAAA,EAAD,CAAMC,GAAG,mBAAmBC,WAAS,EAACI,MAAI,EAACC,GAAI,GAAIJ,UAAU,MAAMiH,QAAQ,WAAW/G,WAAW,SAAjG,UACMoF,EAAc,GACZ,cAACzF,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAGoC,GAAI,EAAtB,SACI,cAACnC,EAAA,EAAD,CAAQC,QAAQ,YACf0C,MAAM,UACNxC,WAAS,EACTD,QAlEH,WACtBuF,EAAgBR,EAAc,GAC9BS,GAAc,GACd3G,EAAUuC,WAAW,WAAWmC,IAAI,WAAWC,OAAO,CAClDQ,YAAY,KA2DQ,yCAQR,cAAC1E,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAGoC,GAAI,EAAtB,SAEQW,EACMmC,EAAY,EAAEC,EAAMf,OACd,cAACnE,EAAA,EAAD,CAAQC,QAAQ,YACZ0C,MAAM,UAAUxC,WAAS,EACzBD,QAtElB,WACtBuF,EAAgBR,EAAc,GAC9BS,GAAc,GACd3G,EAAUuC,WAAW,WAAWmC,IAAI,WAAWC,OAAO,CAClDQ,YAAY,KAgEoB,uCAMA,cAAClE,EAAA,EAAD,CAAQC,QAAQ,YACZ0C,MAAM,UAAUxC,WAAS,EAD7B,SAEI,cAAC,IAAD,CAAM0G,GAAG,QAAQC,MAAO,CAACnE,MAAM,QAASoE,eAAe,QAAvD,4BAKd,cAAC/G,EAAA,EAAD,CAAQC,QAAQ,YACd0C,MAAM,YACNxC,WAAS,EACTD,QAAS,kBAAIwF,GAAc,IAH7B,4CAWlB,cAAClG,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAf,SACKmF,EAAMf,SACCrB,IAECsC,EAEC,oBAAIN,MAAM,SAAV,2EADF,cAAC,EAAD,CAAc/B,GAAImC,EAAMD,GAAalC,GAAI1C,KAAMA,EAAMgD,YAAaA,OAI9E,cAAC7D,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAf,SACKmF,EAAMf,QACH,cAAC,EAAD,CAAON,aAAcA,EAAcC,SAAUA,SAGzD,cAACtE,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIoC,GAAI,EAAvB,SACI,cAAC,EAAD,CAAQ8B,OAAQA,EAAQxC,QAASA,EAASyC,WAAYA,aCpIvD8C,EARF,WACT,OACI,cAAC9D,EAAA,EAAD,uBCsCO+D,EApCG,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,WAAY7G,EAAiD,EAAjDA,KAAM8G,EAA2C,EAA3CA,WAAY9D,EAA+B,EAA/BA,YAAa2B,EAAkB,EAAlBA,YAC5D,OACI,cAAC,IAAD,UACI,cAAC,IAAD,UACCkC,EACGC,EACA,qCACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,EAAD,CAAMhH,KAAMA,EAAMgD,YAAaA,EAAa2B,YAAaA,MAGzD3E,EAAKoB,SACD,cAAC,IAAD,CAAO2F,OAAK,EAACC,KAAK,QAAlB,SACI,cAAC,EAAD,MAGZ,cAAC,IAAD,CAAUC,KAAK,IAAIT,GAAG,SAG1B,mCACI,cAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,EAAD,CAAehH,KAAMA,QAKjC,mCACI,cAAC,IAAD,CAAO+G,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,EAAD,aCcLE,MA7Cf,WAAgB,IAAD,EACWjH,oBAAS,GADpB,mBACNkH,EADM,KACAC,EADA,OAEWnH,mBAAS,MAFpB,mBAEND,EAFM,KAEAqH,EAFA,OAGuBpH,oBAAS,GAHhC,mBAGN6G,EAHM,KAGMQ,EAHN,OAIqBrH,mBAAS,IAJ9B,mBAINsH,EAJM,KAIKC,EAJL,OAKyBvH,mBAAS,CAAC2E,YAAY,EAAGf,YAAW,IAL7D,mBAKNc,EALM,KAKO8C,EALP,KAiCb,OA1BA9B,qBAAU,WACNnH,EAAYkJ,mBAAZ,+BAAA3I,EAAA,MAAgC,WAAM4I,GAAN,eAAA5I,EAAA,0DAC3B4I,EAD2B,gCAELjJ,EAAUuC,WAAW,YAAYiF,MAAM,MAAM,KAAKyB,EAAExG,KAAK0E,MAFpD,OAEtB+B,EAFsB,OAG5BN,EAAcO,QAAQD,EAAS7B,KAAKjC,SACpC,IACEuD,EAAQO,EAAS7B,KAAK,GAAGC,QACzBwB,EAAaI,EAAS7B,KAAK,GAAG3G,IAC/B,MAAM0I,GACLT,EAAQM,GARkB,OAW9BP,GAAQ,GAXsB,2CAAhC,uDAaA1I,EAAUuC,WAAW,WAAWmC,IAAI,WAAW+C,YAAW,SAAAH,GACxDyB,EAAezB,EAAKA,aAErB,IACHL,qBAAU,WACJ4B,GAEJ7I,EAAUuC,WAAW,YAAYmC,IAAImE,GAAWpB,YAAY,SAAA4B,GAC1DV,EAAQU,EAAQ/B,aAElB,CAACuB,IAGH,mCACIJ,EAAO,cAAC,EAAD,CACLN,WAAYgB,QAAQ7H,GACpBA,KAAMA,EACN8G,WAAYA,EACZ9D,YAAauE,EACb5C,YAAaA,IAAkB,2C,MCvCzCqD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7ffee803.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n    appId: process.env.REACT_APP_APP_ID,\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\n  };\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage(); ","import React, { useState } from 'react';\nimport { firebaseInstance, authService } from '../fbase';\nimport './css/Auth.css';\nimport { Grid, Button } from '@material-ui/core';\nimport { IoLogoGoogle, IoLogoApple } from 'react-icons/io5'\n\nconst Auth = () => {\n    const onGooleClick = async () => {\n        const provider = new firebaseInstance.auth.GoogleAuthProvider();\n        await authService.signInWithPopup(provider);\n    }\n\n    return (\n    <>\n    <Grid id=\"auth-button\" container direction=\"row\" spacing={1} alignItems=\"center\">\n        <Grid item xs={12} alignItems=\"center\">\n            <Button variant=\"outlined\" onClick={onGooleClick} fullWidth> <IoLogoGoogle/> &nbsp; 구글아이디로 로그인</Button>\n        </Grid>\n    </Grid>\n    </>\n    )\n}\n\nexport default Auth","import React, {useState} from  'react';\nimport { Grid, Input, FormControl, InputLabel, Button, Snackbar} from '@material-ui/core';\nimport { dbService } from '../fbase';\nimport {useHistory} from 'react-router-dom';\n\nconst CreateAccount = ({user}) => {\n    const [name, setName] = useState(user.displayName);\n    const [tel, setTel] = useState(user.phoneNumber || '');\n    const [created, setCreated] = useState(false);\n    const history = useHistory();\n\n    const onInputChange = (event) => {\n        const {target: {name, value}} = event;\n        if(name===\"name\")\n            setName(value);\n        else if(name===\"tel\")\n            setTel(value);\n    }\n    const onAddUserInfoClicked = async () => {\n        await dbService.collection('userinfo').add({\n            uid: user.uid,\n            name,\n            tel,\n            isAdmin: false\n        });\n        alert('가입이 완료되었습니다.');\n        setCreated(true);\n        history.go(0);\n    }\n\n    return (\n        <>\n        { created ? \n            <Snackbar\n            anchorOrigin={{vertical: 'bottom',horizontal: 'left',}}\n            open={true}\n            autoHideDuration={6000}\n            message=\"새로고침하면 퀴즈 페이지로 이동됩니다.\"\n        />\n        :\n            <form id=\"auth-form\">\n            <Grid container direction=\"row\" spacing={2} alignItems=\"center\">\n                <Grid item xs={12}>\n                    <h2> 이름과 전화번호를 입력해주세요. 이 정보는 추첨을 통해 선물을 보내드리기 위한 정보로, 꼭 입력하지 않아도 됩니다.  </h2>\n                </Grid>\n                <Grid item xs={12} md={5}>\n                    <FormControl>\n                        <InputLabel htmlFor=\"name-input\">이름</InputLabel>\n                        <Input id=\"name-input\" type=\"text\" aria-describedby=\"name-helper\" name=\"name\" onChange={onInputChange} value={name}/>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12} md={5}>\n                    <FormControl>\n                        <InputLabel htmlFor=\"tel-input\">전화번호</InputLabel>\n                        <Input id=\"tel-input\" type=\"tel\" aria-describedby=\"tel-helper\" name=\"tel\" onChange={onInputChange} value={tel}/>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12} md={2}>\n                    <Button onClick={onAddUserInfoClicked} variant=\"contained\" color=\"primary\">확인</Button>\n                </Grid>\n            </Grid>\n        </form>\n        }\n        </>\n    )  \n}\n\nexport default CreateAccount;","import React, { useState } from 'react';\nimport {Paper, Button} from '@material-ui/core';\n\nconst Quiz = ({quiz, showAnswer}) => {\n    const {no, question, answer} = quiz;\n    return (\n        <Paper id=\"quiz\" variant=\"outlined\">\n            <div className=\"title\"> Q{no}. </div>\n            <div className=\"question\"> {question} </div>\n            <div className=\"answer\">\n                정답 : &nbsp;&nbsp;\n                { showAnswer ? answer[0] : \"???\"}\n            </div>\n        </Paper>\n    )\n}\n\nexport default Quiz;","import React, { useState } from 'react';\nimport {Paper, Grid, Button, FormControl, Input, InputLabel, FormHelperText} from '@material-ui/core';\nimport { dbService } from '../fbase';\n\nconst SubmitAnswer = ({no, user, doc_user_id}) => {\n    const {uid, name} = user;\n    const [answer, setAnswer] = useState('');\n    const onInputChange = event => {\n        const {target:{value}} = event;\n        setAnswer(value)\n    }\n    const onSubmitClicked = async () => {\n        const answerObj = {\n            uid,\n            name,\n            answer\n        }\n        await dbService.collection('quiz_'+no).add(answerObj);\n        await dbService.collection('userinfo').doc(doc_user_id).update({\n            ['quiz_'+no]: true\n        })\n        alert('정답이 제출되었습니다.');\n    }\n    return(\n        <Paper id=\"submitAnswer\" variant=\"outlined\">\n            <Grid container direction=\"row\" spacing={2} alignItems=\"center\">\n                <Grid item xs={9}>\n                    <FormControl fullWidth>\n                        <InputLabel htmlFor=\"ans-input\">정답</InputLabel>\n                        <Input id=\"ans-input\" type=\"text\" aria-describedby=\"ans-helper\" name=\"answer\" onChange={onInputChange} value={answer}/>\n                        <FormHelperText id=\"ans-helper\"> 제출 후에는 변경할 수 없습니다!</FormHelperText>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={3}>\n                    <Button onClick={onSubmitClicked} fullWidth variant=\"contained\" color=\"primary\">\n                        제출\n                    </Button>\n                </Grid>\n            </Grid>\n        </Paper>\n    )\n}\n\nexport default SubmitAnswer;","import React, { useState, useEffect } from 'react';\nimport { Paper, Grid } from '@material-ui/core';\nimport { IoPeopleSharp, IoCheckmarkCircleSharp } from 'react-icons/io5'\nimport { dbService } from '../fbase';\nimport Quiz from './Quiz';\n\nconst Board = ({participants, corrects}) => {\n    return(\n        <Paper id=\"board\" variant=\"outlined\">\n            <Grid container direction=\"row\" spacing={2}>\n                <Grid item xs={6}>\n                    <div className=\"board-count\">\n                        <IoPeopleSharp size=\"20\"/>&nbsp;\n                        참여 {participants}\n                    </div>\n                </Grid>\n                <Grid item xs={6}>\n                    <div className=\"board-count\">\n                        <IoCheckmarkCircleSharp size=\"20\"/>&nbsp;\n                        정답 {corrects}\n                    </div>\n                </Grid>\n            </Grid>\n        </Paper>\n    )\n}\n\nexport default Board;","import React from 'react';\nimport { Paper, Grid, FormGroup, FormControlLabel, Switch } from '@material-ui/core';\nimport {dbService} from '../fbase';\n\nconst Wrongs = ({wrongs, isAdmin, showWrongs}) => {\n    const toggleShowWrongs = () => {\n        dbService.collection('current').doc('current').update({\n            showWrongs: !showWrongs\n        })\n    }\n    return (\n        <Paper id=\"wrongs\" variant=\"outlined\">\n            <Grid container direction=\"column\" spacing={1}>\n                <Grid item container direction=\"row\">\n                    <Grid item xs={6}>\n                        <h3>오답 {wrongs.length} </h3>\n                    </Grid>\n                    {isAdmin && <Grid item xs={6}>\n                        <FormGroup>\n                            <FormControlLabel\n                                control={<Switch checked={showWrongs} onChange={toggleShowWrongs} name=\"showWrongs\" />}\n                                label={showWrongs ? \"오답 숨기기\" : \"오답 보기\"}\n                            />\n                        </FormGroup>\n                    </Grid>}\n                </Grid>\n                {showWrongs ? wrongs.map( (w, idx) => (\n                    <Grid item key={idx} >\n                        <Paper className=\"wrongs-wrong\" variant=\"elevation\" elevation={2}>\n                            <h3> {w.answer} </h3>\n                        </Paper>\n                    </Grid>\n                    )) \n                    :<Grid item>\n                        <h4 align=\"center\">어떤 오답들이 있을까요?</h4>\n                    </Grid>\n                }\n            </Grid>\n            \n        </Paper>\n    )\n}\n\nexport default Wrongs;","import React, {useEffect, useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport Quiz from '../components/Quiz';\nimport { dbService } from '../fbase';\nimport SubmitAnswer from '../components/SubmitAnswer'\nimport Board from '../components/Board';\nimport Wrongs from '../components/Wrongs';\nimport { Grid, Button } from '@material-ui/core';\nimport './css/Home.css';\n\nconst Home = ({user, doc_user_id, currentInfo}) => {\n    const {isAdmin} = user\n    const {currentQuiz, showAnswer, showWrongs} = currentInfo;\n    const [quizs, setQuizs] = useState([]);\n    const [isSolved, setIsSolved] = useState(false);\n    const [participants, setParticipants] = useState(0);\n    const [corrects, setCorrects] = useState(0);\n    const [wrongs, setWrongs] = useState([]);\n\n    const setCurrentQuiz = ( idx ) => {\n        dbService.collection('current').doc('current').update({\n            currentQuiz: idx\n        })\n    }\n    const setShowAnswer = (bool) => {\n        dbService.collection('current').doc('current').update({\n            showAnswer: bool\n        })\n    }\n    const onPrevQuizClicked = () => {\n        setCurrentQuiz( currentQuiz - 1 );\n        setShowAnswer(false);\n        dbService.collection('current').doc('current').update({\n            showWrongs: false\n        })\n    }\n    const onNextQuizClicked = () => {\n        setCurrentQuiz( currentQuiz + 1);\n        setShowAnswer(false);\n        dbService.collection('current').doc('current').update({\n            showWrongs: false\n        })\n    }\n    const checkSolved = async () => {\n        if(!quizs.length)\n            return;\n        setIsSolved(user['quiz_'+quizs[currentQuiz].no]);\n    }\n    const isCorrectAnswer = (answer, correctAnswerArr) => correctAnswerArr.includes(answer);\n\n    useEffect( async () => {\n        const quizData = await dbService.collection('quiz').orderBy('no').get();\n        setQuizs(quizData.docs.map(doc => doc.data()));\n    }, [])\n    useEffect( () => {\n        checkSolved()\n    }, [quizs, currentQuiz, user])\n    useEffect( async () => {\n        if(!quizs.length)\n            return;\n        const currentQuizNo = quizs[currentQuiz].no;\n        const correctAnswerArr = (await dbService.collection('quiz').where('no','==',currentQuizNo).get()).docs[0].data().answer;\n        dbService.collection(\"quiz_\"+currentQuizNo).onSnapshot( snapshot => {\n            const answers = snapshot.docs.map( doc => doc.data() );\n            setParticipants(answers.length);\n            let c = [], w = [];\n            answers.map( a => {\n                isCorrectAnswer(a.answer, correctAnswerArr) ? \n                      c = [...c, a]\n                    : w = [...w, a]\n            })\n            setCorrects(c.length);\n            setWrongs(w);\n        })\n    }, [quizs, currentQuiz])\n\n    return (\n        <>\n        <Grid container direction=\"row\" spacing={2} alignItems=\"stretch\">\n            <Grid container item xs={12} md={8} direction=\"row\" spacing=\"auto\">\n                <Grid item xs={12}>\n                    {\n                        quizs.length ?\n                        <Quiz quiz={quizs[currentQuiz]} showAnswer={showAnswer} />\n                        : <h6>퀴즈를 가져오는 중입니다...</h6>\n                    }\n                </Grid>\n\n                { isAdmin &&\n                    <Grid id=\"admin-button-box\" container item xs={12} direction=\"row\" justify=\"flex-end\" alignItems=\"center\">\n                        { currentQuiz > 0 && \n                            <Grid item xs={6} md={3}>\n                                <Button variant=\"contained\"\n                                 color=\"primary\" \n                                 fullWidth \n                                 onClick={onPrevQuizClicked}>\n                                     이전 문제\n                                </Button>\n                            </Grid>\n                        }\n                        <Grid item xs={6} md={3}>\n                            {   \n                                showAnswer ? \n                                    ( currentQuiz+1<quizs.length ?\n                                            <Button variant=\"contained\" \n                                                color=\"primary\" fullWidth \n                                                onClick={onNextQuizClicked}>\n                                                    다음 문제\n                                            </Button>\n                                        :\n                                            <Button variant=\"contained\" \n                                                color=\"primary\" fullWidth>\n                                                <Link to=\"/draw\" style={{color:\"white\", textDecoration:\"none\"}}>\n                                                    추첨\n                                                </Link>\n                                            </Button> \n                                        )\n                                : <Button variant=\"contained\" \n                                    color=\"secondary\" \n                                    fullWidth \n                                    onClick={()=>setShowAnswer(true)}>\n                                        정답 공개\n                                    </Button>\n                            }\n                        </Grid>\n                    </Grid>\n                }\n\n                <Grid item xs={12}>\n                    {quizs.length \n                        && !showAnswer\n                        && (\n                            !isSolved ?\n                            <SubmitAnswer no={quizs[currentQuiz].no} user={user} doc_user_id={doc_user_id}/>\n                            : <h4 align=\"center\">정답을 제출하셨습니다</h4>\n                        )}\n                </Grid>\n                <Grid item xs={12}>\n                    {quizs.length && \n                        <Board participants={participants} corrects={corrects}/>}\n                </Grid>\n            </Grid>\n            <Grid item xs={12} md={4}>\n                <Wrongs wrongs={wrongs} isAdmin={isAdmin} showWrongs={showWrongs}/>\n            </Grid>\n        </Grid>\n        </>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport { Paper, Grid } from '@material-ui/core';\n\nconst Draw = () => {\n    return (\n        <Paper>\n            Drawing\n        </Paper>\n    )\n}\n\nexport default Draw;","import React from \"react\";\nimport { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport Auth from \"../routes/Auth\";\nimport CreateAccount from \"../routes/CreateAccount\";\nimport Home from \"../routes/Home\";\nimport Draw from \"../routes/Draw\";\n\nconst AppRouter = ({ isLoggedIn, user, hasAccount, doc_user_id, currentInfo }) => {\n    return (\n        <Router>\n            <Switch>\n            {isLoggedIn? (\n                hasAccount ?\n                <>\n                    <Route exact path=\"/\">\n                        <Home user={user} doc_user_id={doc_user_id} currentInfo={currentInfo}/>\n                    </Route>\n                    {\n                        user.isAdmin && \n                            <Route exact path=\"/draw\">\n                                <Draw/>\n                            </Route>\n                    }\n                    <Redirect from=\"*\" to=\"/\"/>\n                </>\n                :\n                <>\n                    <Route exact path=\"/\">\n                        <CreateAccount user={user}/>\n                    </Route>\n                </>\n            ) \n            : (\n            <>\n                <Route exact path=\"/\">\n                    <Auth />\n                </Route>\n            </>\n            )}\n            </Switch>\n        </Router>\n    );\n};\nexport default AppRouter;","import React, { useState, useEffect } from 'react';\nimport { authService, dbService } from '../fbase';\nimport AppRouter from './Router'\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [user, setUser] = useState(null);\n  const [hasAccount, setHasAccount] = useState(false);\n  const [docUserId, setDocUserId] = useState('');\n  const [currentInfo, setCurrentInfo] = useState({currentQuiz:0, showWrongs:false});\n  \n  useEffect(() => {\n      authService.onAuthStateChanged( async u => {\n        if(u){\n          const userinfo = await dbService.collection('userinfo').where('uid','==',u.uid).get();\n          setHasAccount(Boolean(userinfo.docs.length))\n          try{\n            setUser(userinfo.docs[0].data());\n            setDocUserId(userinfo.docs[0].id);\n          }catch(e){\n            setUser(u)\n          }\n        }\n        setInit(true);\n      });\n      dbService.collection('current').doc('current').onSnapshot(data => {\n        setCurrentInfo(data.data())\n      });\n    }, [])\n    useEffect(() => {\n      if(!docUserId)\n        return;\n      dbService.collection('userinfo').doc(docUserId).onSnapshot( newUser => {\n        setUser(newUser.data());\n      })\n    },[docUserId])\n    \n  return (\n    <>\n      { init ? <AppRouter \n          isLoggedIn={Boolean(user)} \n          user={user} \n          hasAccount={hasAccount} \n          doc_user_id={docUserId}\n          currentInfo={currentInfo} /> : \"로딩중입니다!\" }\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
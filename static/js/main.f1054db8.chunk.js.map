{"version":3,"sources":["fbase.js","routes/Auth.js","routes/CreateAccount.js","components/Quiz.js","components/SubmitAnswer.js","components/Board.js","components/Wrongs.js","routes/Home.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseInstance","authService","auth","dbService","firestore","storage","Auth","onGooleClick","a","provider","GoogleAuthProvider","signInWithPopup","id","Grid","container","direction","spacing","alignItems","item","xs","Button","variant","onClick","CreateAccount","user","useState","displayName","name","setName","phoneNumber","tel","setTel","created","setCreated","history","useHistory","onInputChange","event","target","value","onAddUserInfoClicked","collection","add","uid","isAdmin","alert","go","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","message","md","FormControl","InputLabel","htmlFor","Input","type","aria-describedby","onChange","color","Quiz","quiz","showAnswer","no","question","answer","Paper","className","SubmitAnswer","doc_user_id","setAnswer","onSubmitClicked","answerObj","doc","update","fullWidth","FormHelperText","Board","participants","corrects","size","Wrongs","wrongs","showWrongs","length","FormGroup","FormControlLabel","control","Switch","checked","label","map","w","idx","elevation","align","Home","currentInfo","currentQuiz","quizs","setQuizs","isSolved","setIsSolved","setParticipants","setCorrects","setWrongs","setCurrentQuiz","setShowAnswer","bool","checkSolved","isCorrectAnswer","correctAnswerArr","includes","useEffect","orderBy","get","quizData","docs","data","currentQuizNo","where","onSnapshot","snapshot","answers","c","justify","AppRouter","isLoggedIn","hasAccount","exact","path","App","init","setInit","setUser","setHasAccount","docUserId","setDocUserId","setCurrentInfo","onAuthStateChanged","u","userinfo","Boolean","e","newUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAgBAA,IAASC,cAXc,CACnBC,OAAQC,0CACRC,WAAYD,gCACZE,YAAaF,uCACbG,UAAWH,gBACXI,cAAeJ,4BACfK,kBAAmBL,eACnBM,MAAON,4CACPO,cAAeP,iBAKZ,IAAMQ,EAAmBX,IACnBY,EAAcZ,IAASa,OACvBC,EAAYd,IAASe,Y,GACJf,IAASgB,U,iDCOxBC,EAtBF,WACT,IAAMC,EAAY,uCAAG,4BAAAC,EAAA,6DACXC,EAAW,IAAIT,EAAiBE,KAAKQ,mBAD1B,SAEXT,EAAYU,gBAAgBF,GAFjB,2CAAH,qDAKlB,OACA,mCACA,sBAAMG,GAAG,YAAT,SACI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAGC,WAAW,SAAvD,SACI,cAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAf,SACI,eAACC,EAAA,EAAD,CAAQC,QAAQ,WAAWC,QAASf,EAApC,cAAmD,cAAC,IAAD,IAAnD,4E,oCCmDDgB,EA/DO,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAAU,EACNC,mBAASD,EAAKE,aADR,mBACvBC,EADuB,KACjBC,EADiB,OAERH,mBAASD,EAAKK,aAAe,IAFrB,mBAEvBC,EAFuB,KAElBC,EAFkB,OAGAN,oBAAS,GAHT,mBAGvBO,EAHuB,KAGdC,EAHc,KAIxBC,EAAUC,cAEVC,EAAgB,SAACC,GAAW,IAAD,EACGA,EAAzBC,OAASX,EADa,EACbA,KAAMY,EADO,EACPA,MACZ,SAAPZ,EACCC,EAAQW,GACG,QAAPZ,GACJI,EAAOQ,IAETC,EAAoB,uCAAG,sBAAAhC,EAAA,sEACnBL,EAAUsC,WAAW,YAAYC,IAAI,CACvCC,IAAKnB,EAAKmB,IACVhB,OACAG,MACAc,SAAS,IALY,OAOzBC,MAAM,kEACNZ,GAAW,GACXC,EAAQY,GAAG,GATc,2CAAH,qDAY1B,OACI,mCACEd,EACE,cAACe,EAAA,EAAD,CACAC,aAAc,CAACC,SAAU,SAASC,WAAY,QAC9CC,MAAM,EACNC,iBAAkB,IAClBC,QAAQ,+GAGR,sBAAMzC,GAAG,YAAT,SACA,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAGC,WAAW,SAAvD,UACI,cAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAf,SACI,kVAEJ,cAACN,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAImC,GAAI,EAAvB,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,aAApB,0BACA,cAACC,EAAA,EAAD,CAAO9C,GAAG,aAAa+C,KAAK,OAAOC,mBAAiB,cAAcjC,KAAK,OAAOkC,SAAUzB,EAAeG,MAAOZ,SAGtH,cAACd,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAImC,GAAI,EAAvB,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,YAApB,sCACA,cAACC,EAAA,EAAD,CAAO9C,GAAG,YAAY+C,KAAK,MAAMC,mBAAiB,aAAajC,KAAK,MAAMkC,SAAUzB,EAAeG,MAAOT,SAIlH,cAACjB,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAImC,GAAI,EAAvB,SACI,cAAClC,EAAA,EAAD,CAAQE,QAASkB,EAAsBnB,QAAQ,YAAYyC,MAAM,UAAjE,oC,iBCzCLC,EAfF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,WACVC,EAAwBF,EAAxBE,GAAIC,EAAoBH,EAApBG,SAAUC,EAAUJ,EAAVI,OACrB,OACI,eAACC,EAAA,EAAD,CAAOzD,GAAG,OAAOS,QAAQ,WAAzB,UACI,oDACA,qCAAQ6C,EAAR,QACA,mCAAMC,EAAN,OACA,qBAAIG,UAAU,SAAd,oCAEML,EAAaG,EAAO,GAAK,a,yBC+B5BG,EAvCM,SAAC,GAA6B,IAA5BL,EAA2B,EAA3BA,GAAI1C,EAAuB,EAAvBA,KAAMgD,EAAiB,EAAjBA,YACtB7B,EAAanB,EAAbmB,IAAKhB,EAAQH,EAARG,KADkC,EAElBF,mBAAS,IAFS,mBAEvC2C,EAFuC,KAE/BK,EAF+B,KAOxCC,EAAe,uCAAG,4BAAAlE,EAAA,6DACdmE,EAAY,CACdhC,MACAhB,OACAyC,UAJgB,SAMdjE,EAAUsC,WAAW,QAAQyB,GAAIxB,IAAIiC,GANvB,uBAOdxE,EAAUsC,WAAW,YAAYmC,IAAIJ,GAAaK,OAAlD,eACD,QAAQX,GAAK,IARE,OAUpBrB,MAAM,kEAVc,2CAAH,qDAYrB,OACI,cAACwB,EAAA,EAAD,CAAOzD,GAAG,eAAeS,QAAQ,WAAjC,SACI,eAACR,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAGC,WAAW,SAAvD,UACI,cAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAf,SACI,eAACoC,EAAA,EAAD,CAAauB,WAAS,EAAtB,UACI,cAACtB,EAAA,EAAD,CAAYC,QAAQ,YAApB,0BACA,cAACC,EAAA,EAAD,CAAO9C,GAAG,YAAY+C,KAAK,OAAOC,mBAAiB,aAAajC,KAAK,SAASkC,SAtB5E,SAAAxB,GAAU,IACbE,EAAUF,EAAlBC,OAAQC,MACfkC,EAAUlC,IAoB6GA,MAAO6B,IAC9G,cAACW,EAAA,EAAD,CAAgBnE,GAAG,aAAnB,uGAGR,cAACC,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAf,SACI,cAACC,EAAA,EAAD,CAAQE,QAASoD,EAAiBI,WAAS,EAACzD,QAAQ,YAAYyC,MAAM,UAAtE,kCCPLkB,EArBD,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,SAC1B,OACI,cAACb,EAAA,EAAD,CAAOzD,GAAG,QAAQS,QAAQ,WAA1B,SACI,eAACR,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAzC,UACI,cAACH,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAf,SACI,sBAAKmD,UAAU,cAAf,UACI,cAAC,IAAD,CAAea,KAAK,OADxB,2BAESF,OAGb,cAACpE,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAf,SACI,sBAAKmD,UAAU,cAAf,UACI,cAAC,IAAD,CAAwBa,KAAK,OADjC,2BAESD,a,2BCuBdE,EAtCA,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,OAAQzC,EAAyB,EAAzBA,QAAS0C,EAAgB,EAAhBA,WAM9B,OACI,qBAAK1E,GAAG,SAAR,SACI,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAS,EAA5C,UACI,eAACH,EAAA,EAAD,CAAMK,MAAI,EAACJ,WAAS,EAACC,UAAU,MAA/B,UACI,cAACF,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAf,SACI,+CAAQkE,EAAOE,OAAf,SAEH3C,GAAW,cAAC/B,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAf,SACR,cAACqE,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIC,QAAS,cAACC,EAAA,EAAD,CAAQC,QAASN,EAAYzB,SAfzC,WACrB1D,EAAUsC,WAAW,WAAWmC,IAAI,WAAWC,OAAO,CAClDS,YAAaA,KAayE3D,KAAK,eACvEkE,MAAOP,EAAa,kCAAW,qCAK9CA,EAAaD,EAAOS,KAAK,SAACC,EAAGC,GAAJ,OACtB,cAACnF,EAAA,EAAD,CAAMK,MAAI,EAAV,SACI,cAACmD,EAAA,EAAD,CAAOC,UAAU,eAAejD,QAAQ,YAAY4E,UAAW,EAA/D,SACI,mCAAMF,EAAE3B,OAAR,UAFQ4B,MAMf,cAACnF,EAAA,EAAD,CAAMK,MAAI,EAAV,SACG,oBAAIgF,MAAM,SAAV,qFC4GTC,EArIF,SAAC,GAAsC,IAArC3E,EAAoC,EAApCA,KAAMgD,EAA8B,EAA9BA,YAAa4B,EAAiB,EAAjBA,YACvBxD,EAAWpB,EAAXoB,QACAyD,EAAuCD,EAAvCC,YAAapC,EAA0BmC,EAA1BnC,WAAYqB,EAAcc,EAAdd,WAFe,EAGrB7D,mBAAS,IAHY,mBAGxC6E,EAHwC,KAGjCC,EAHiC,OAIf9E,oBAAS,GAJM,mBAIxC+E,EAJwC,KAI9BC,EAJ8B,OAKPhF,mBAAS,GALF,mBAKxCwD,EALwC,KAK1ByB,EAL0B,OAMfjF,mBAAS,GANM,mBAMxCyD,EANwC,KAM9ByB,EAN8B,OAOnBlF,mBAAS,IAPU,mBAOxC4D,EAPwC,KAOhCuB,EAPgC,KASzCC,EAAiB,SAAEb,GACrB7F,EAAUsC,WAAW,WAAWmC,IAAI,WAAWC,OAAO,CAClDwB,YAAaL,KAGfc,EAAgB,SAACC,GACnB5G,EAAUsC,WAAW,WAAWmC,IAAI,WAAWC,OAAO,CAClDZ,WAAY8C,KAiBdC,EAAW,uCAAG,sBAAAxG,EAAA,yDACZ8F,EAAMf,OADM,iDAGhBkB,EAAYjF,EAAK,QAAQ8E,EAAMD,GAAanC,KAH5B,2CAAH,qDAKX+C,EAAkB,SAAC7C,EAAQ8C,GAAT,OAA8BA,EAAiBC,SAAS/C,IA4BhF,OA1BAgD,oBAAS,sBAAE,4BAAA5G,EAAA,sEACgBL,EAAUsC,WAAW,QAAQ4E,QAAQ,MAAMC,MAD3D,OACDC,EADC,OAEPhB,EAASgB,EAASC,KAAK1B,KAAI,SAAAlB,GAAG,OAAIA,EAAI6C,WAF/B,2CAGR,IACHL,qBAAW,WACPJ,MACD,CAACV,EAAOD,EAAa7E,IACxB4F,oBAAS,sBAAE,8BAAA5G,EAAA,yDACH8F,EAAMf,OADH,wDAGDmC,EAAgBpB,EAAMD,GAAanC,GAHlC,SAIyB/D,EAAUsC,WAAW,QAAQkF,MAAM,KAAK,KAAKD,GAAeJ,MAJrF,OAIDJ,EAJC,OAI4FM,KAAK,GAAGC,OAAOrD,OAClHjE,EAAUsC,WAAW,QAAQiF,GAAeE,YAAY,SAAAC,GACpD,IAAMC,EAAUD,EAASL,KAAK1B,KAAK,SAAAlB,GAAG,OAAIA,EAAI6C,UAC9Cf,EAAgBoB,EAAQvC,QACxB,IAAIwC,EAAI,GAAIhC,EAAI,GAChB+B,EAAQhC,KAAK,SAAAtF,GACTyG,EAAgBzG,EAAE4D,OAAQ8C,GACpBa,EAAC,sBAAOA,GAAP,CAAUvH,IACXuF,EAAC,sBAAOA,GAAP,CAAUvF,OAErBmG,EAAYoB,EAAExC,QACdqB,EAAUb,MAfP,2CAiBR,CAACO,EAAOD,IAGP,mCACA,eAACxF,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAGC,WAAW,UAAvD,UACI,eAACJ,EAAA,EAAD,CAAMC,WAAS,EAACI,MAAI,EAACC,GAAI,GAAImC,GAAI,EAAGvC,UAAU,MAA9C,UACI,cAACF,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAf,SAEQmF,EAAMf,OACN,cAAC,EAAD,CAAMvB,KAAMsC,EAAMD,GAAcpC,WAAYA,IAC1C,2GAIRrB,GACE,eAAC/B,EAAA,EAAD,CAAMC,WAAS,EAACI,MAAI,EAACC,GAAI,GAAIJ,UAAU,MAAMiH,QAAQ,WAAWhH,QAAS,EAAzE,UACMqF,EAAc,GACZ,cAACxF,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGmC,GAAI,EAAtB,SACI,cAAClC,EAAA,EAAD,CAAQC,QAAQ,YACfyC,MAAM,UACNgB,WAAS,EACTxD,QAlEH,WACtBuF,EAAgBR,EAAc,GAC9BS,GAAc,GACd3G,EAAUsC,WAAW,WAAWmC,IAAI,WAAWC,OAAO,CAClDS,YAAY,KA2DQ,yCAQR,cAACzE,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGmC,GAAI,EAAtB,SAEQW,EACMoC,EAAY,EAAEC,EAAMf,QAClB,cAACnE,EAAA,EAAD,CAAQC,QAAQ,YACZyC,MAAM,UACNgB,WAAS,EACTxD,QAvEd,WACtBuF,EAAgBR,EAAc,GAC9BS,GAAc,GACd3G,EAAUsC,WAAW,WAAWmC,IAAI,WAAWC,OAAO,CAClDS,YAAY,KAgEgB,uCAMN,cAAClE,EAAA,EAAD,CAAQC,QAAQ,YACdyC,MAAM,YACNgB,WAAS,EACTxD,QAAS,kBAAIwF,GAAc,IAH7B,4CAWlB,cAACjG,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAf,SACKmF,EAAMf,SACCtB,IAECuC,EAEC,oBAAIN,MAAM,SAAV,2EADF,cAAC,EAAD,CAAchC,GAAIoC,EAAMD,GAAanC,GAAI1C,KAAMA,EAAMgD,YAAaA,OAI9E,cAAC3D,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAf,SACKmF,EAAMf,QACH,cAAC,EAAD,CAAON,aAAcA,EAAcC,SAAUA,SAGzD,cAACrE,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAImC,GAAI,EAAvB,SACI,cAAC,EAAD,CAAQ+B,OAAQA,EAAQzC,QAASA,EAAS0C,WAAYA,YCpGvD2C,EA7BG,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,WAAY1G,EAAiD,EAAjDA,KAAM2G,EAA2C,EAA3CA,WAAY3D,EAA+B,EAA/BA,YAAa4B,EAAkB,EAAlBA,YAC5D,OACI,cAAC,IAAD,UACI,cAAC,IAAD,UACC8B,EACGC,EACA,mCACA,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,EAAD,CAAM7G,KAAMA,EAAMgD,YAAaA,EAAa4B,YAAaA,QAI7D,mCACI,cAAC,IAAD,CAAOgC,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,EAAD,CAAe7G,KAAMA,QAKjC,mCACI,cAAC,IAAD,CAAO4G,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,EAAD,aCsBLC,MA7Cf,WAAgB,IAAD,EACW7G,oBAAS,GADpB,mBACN8G,EADM,KACAC,EADA,OAEW/G,mBAAS,MAFpB,mBAEND,EAFM,KAEAiH,EAFA,OAGuBhH,oBAAS,GAHhC,mBAGN0G,EAHM,KAGMO,EAHN,OAIqBjH,mBAAS,IAJ9B,mBAINkH,EAJM,KAIKC,EAJL,OAKyBnH,mBAAS,CAAC4E,YAAY,EAAGf,YAAW,IAL7D,mBAKNc,EALM,KAKOyC,EALP,KAiCb,OA1BAzB,qBAAU,WACNnH,EAAY6I,mBAAZ,+BAAAtI,EAAA,MAAgC,WAAMuI,GAAN,eAAAvI,EAAA,0DAC3BuI,EAD2B,gCAEL5I,EAAUsC,WAAW,YAAYkF,MAAM,MAAM,KAAKoB,EAAEpG,KAAK2E,MAFpD,OAEtB0B,EAFsB,OAG5BN,EAAcO,QAAQD,EAASxB,KAAKjC,SACpC,IACEkD,EAAQO,EAASxB,KAAK,GAAGC,QACzBmB,EAAaI,EAASxB,KAAK,GAAG5G,IAC/B,MAAMsI,GACLT,EAAQM,GARkB,OAW9BP,GAAQ,GAXsB,2CAAhC,uDAaArI,EAAUsC,WAAW,WAAWmC,IAAI,WAAWgD,YAAW,SAAAH,GACxDoB,EAAepB,EAAKA,aAErB,IACHL,qBAAU,WACJuB,GAEJxI,EAAUsC,WAAW,YAAYmC,IAAI+D,GAAWf,YAAY,SAAAuB,GAC1DV,EAAQU,EAAQ1B,aAElB,CAACkB,IAGH,mCACIJ,EAAO,cAAC,EAAD,CACLL,WAAYe,QAAQzH,GACpBA,KAAMA,EACN2G,WAAYA,EACZ3D,YAAamE,EACbvC,YAAaA,IAAkB,2C,MCvCzCgD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f1054db8.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n    appId: process.env.REACT_APP_APP_ID,\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\n  };\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage(); ","import React, { useState } from 'react';\nimport { firebaseInstance, authService } from '../fbase';\nimport './css/Auth.css';\nimport { Grid, Button } from '@material-ui/core';\nimport { IoLogoGoogle, IoLogoApple } from 'react-icons/io5'\n\nconst Auth = () => {\n    const onGooleClick = async () => {\n        const provider = new firebaseInstance.auth.GoogleAuthProvider();\n        await authService.signInWithPopup(provider);\n    }\n\n    return (\n    <>\n    <form id=\"auth-form\">\n        <Grid container direction=\"row\" spacing={1} alignItems=\"center\">\n            <Grid item xs={12}>\n                <Button variant=\"outlined\" onClick={onGooleClick}> <IoLogoGoogle/> &nbsp; 구글아이디로 로그인</Button>\n            </Grid>\n            {/* <Grid item xs={12} md={6}>\n                <Button variant=\"outlined\"> <IoLogoApple/> &nbsp; 애플아이디로 로그인</Button>\n            </Grid> */}\n        </Grid>\n    </form>\n    </>\n    )\n}\n\nexport default Auth","import React, {useState} from  'react';\nimport { Grid, Input, FormControl, InputLabel, Button, Snackbar} from '@material-ui/core';\nimport { dbService } from '../fbase';\nimport {useHistory} from 'react-router-dom';\n\nconst CreateAccount = ({user}) => {\n    const [name, setName] = useState(user.displayName);\n    const [tel, setTel] = useState(user.phoneNumber || '');\n    const [created, setCreated] = useState(false);\n    const history = useHistory();\n\n    const onInputChange = (event) => {\n        const {target: {name, value}} = event;\n        if(name===\"name\")\n            setName(value);\n        else if(name===\"tel\")\n            setTel(value);\n    }\n    const onAddUserInfoClicked = async () => {\n        await dbService.collection('userinfo').add({\n            uid: user.uid,\n            name,\n            tel,\n            isAdmin: false\n        });\n        alert('가입이 완료되었습니다.');\n        setCreated(true);\n        history.go(0);\n    }\n\n    return (\n        <>\n        { created ? \n            <Snackbar\n            anchorOrigin={{vertical: 'bottom',horizontal: 'left',}}\n            open={true}\n            autoHideDuration={6000}\n            message=\"새로고침하면 퀴즈 페이지로 이동됩니다.\"\n        />\n        :\n            <form id=\"auth-form\">\n            <Grid container direction=\"row\" spacing={2} alignItems=\"center\">\n                <Grid item xs={12}>\n                    <h2> 이름과 전화번호를 입력해주세요. 이 정보는 추첨을 통해 선물을 보내드리기 위한 정보로, 꼭 입력하지 않아도 됩니다.  </h2>\n                </Grid>\n                <Grid item xs={12} md={5}>\n                    <FormControl>\n                        <InputLabel htmlFor=\"name-input\">이름</InputLabel>\n                        <Input id=\"name-input\" type=\"text\" aria-describedby=\"name-helper\" name=\"name\" onChange={onInputChange} value={name}/>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12} md={5}>\n                    <FormControl>\n                        <InputLabel htmlFor=\"tel-input\">전화번호</InputLabel>\n                        <Input id=\"tel-input\" type=\"tel\" aria-describedby=\"tel-helper\" name=\"tel\" onChange={onInputChange} value={tel}/>\n                        {/* <FormHelperText id=\"tel-helper\">We'll never share your tel.</FormHelperText> */}\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12} md={2}>\n                    <Button onClick={onAddUserInfoClicked} variant=\"contained\" color=\"primary\">확인</Button>\n                </Grid>\n            </Grid>\n        </form>\n        }\n        </>\n    )  \n}\n\nexport default CreateAccount;","import React, { useState } from 'react';\nimport {Paper, Button} from '@material-ui/core';\n\nconst Quiz = ({quiz, showAnswer}) => {\n    const {no, question, answer} = quiz;\n    return (\n        <Paper id=\"quiz\" variant=\"outlined\">\n            <h4>주관식</h4>\n            <h1> Q {no}. </h1>\n            <h3> {question} </h3>\n            <h2 className=\"answer\">\n                정답 : &nbsp;&nbsp;\n                { showAnswer ? answer[0] : \"???\"}\n            </h2>\n        </Paper>\n    )\n}\n\nexport default Quiz;","import React, { useState } from 'react';\nimport {Paper, Grid, Button, FormControl, Input, InputLabel, FormHelperText} from '@material-ui/core';\nimport { dbService } from '../fbase';\n\nconst SubmitAnswer = ({no, user, doc_user_id}) => {\n    const {uid, name} = user;\n    const [answer, setAnswer] = useState('');\n    const onInputChange = event => {\n        const {target:{value}} = event;\n        setAnswer(value)\n    }\n    const onSubmitClicked = async () => {\n        const answerObj = {\n            uid,\n            name,\n            answer\n        }\n        await dbService.collection('quiz_'+no).add(answerObj);\n        await dbService.collection('userinfo').doc(doc_user_id).update({\n            ['quiz_'+no]: true\n        })\n        alert('정답이 제출되었습니다.');\n    }\n    return(\n        <Paper id=\"SubmitAnswer\" variant=\"outlined\">\n            <Grid container direction=\"row\" spacing={2} alignItems=\"center\">\n                <Grid item xs={9}>\n                    <FormControl fullWidth>\n                        <InputLabel htmlFor=\"ans-input\">정답</InputLabel>\n                        <Input id=\"ans-input\" type=\"text\" aria-describedby=\"ans-helper\" name=\"answer\" onChange={onInputChange} value={answer}/>\n                        <FormHelperText id=\"ans-helper\"> 제출 후에는 변경할 수 없습니다!</FormHelperText>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={3}>\n                    <Button onClick={onSubmitClicked} fullWidth variant=\"contained\" color=\"primary\">\n                        제출\n                    </Button>\n                </Grid>\n            </Grid>\n        </Paper>\n    )\n}\n\nexport default SubmitAnswer;","import React, { useState, useEffect } from 'react';\nimport { Paper, Grid } from '@material-ui/core';\nimport { IoPeopleSharp, IoCheckmarkCircleSharp } from 'react-icons/io5'\nimport { dbService } from '../fbase';\nimport Quiz from './Quiz';\n\nconst Board = ({participants, corrects}) => {\n    return(\n        <Paper id=\"board\" variant=\"outlined\">\n            <Grid container direction=\"row\" spacing={2}>\n                <Grid item xs={6}>\n                    <div className=\"board-count\">\n                        <IoPeopleSharp size=\"20\"/>&nbsp;\n                        참여자 {participants}\n                    </div>\n                </Grid>\n                <Grid item xs={6}>\n                    <div className=\"board-count\">\n                        <IoCheckmarkCircleSharp size=\"20\"/>&nbsp;\n                        정답자 {corrects}\n                    </div>\n                </Grid>\n            </Grid>\n        </Paper>\n    )\n}\n\nexport default Board;","import React from 'react';\nimport { Paper, Grid, FormGroup, FormControlLabel, Switch } from '@material-ui/core';\nimport {dbService} from '../fbase';\n\nconst Wrongs = ({wrongs, isAdmin, showWrongs}) => {\n    const toggleShowWrongs = () => {\n        dbService.collection('current').doc('current').update({\n            showWrongs: !showWrongs\n        })\n    }\n    return (\n        <div id=\"wrongs\">\n            <Grid container direction=\"column\" spacing={1}>\n                <Grid item container direction=\"row\">\n                    <Grid item xs={6}>\n                        <h3>오답 {wrongs.length} </h3>\n                    </Grid>\n                    {isAdmin && <Grid item xs={6}>\n                        <FormGroup>\n                            <FormControlLabel\n                                control={<Switch checked={showWrongs} onChange={toggleShowWrongs} name=\"showWrongs\" />}\n                                label={showWrongs ? \"오답 숨기기\" : \"오답 보기\"}\n                            />\n                        </FormGroup>\n                    </Grid>}\n                </Grid>\n                {showWrongs ? wrongs.map( (w, idx) => (\n                    <Grid item key={idx} >\n                        <Paper className=\"wrongs-wrong\" variant=\"elevation\" elevation={2}>\n                            <h3> {w.answer} </h3>\n                        </Paper>\n                    </Grid>\n                    )) \n                    :<Grid item>\n                        <h4 align=\"center\">어떤 오답들이 있을까요?</h4>\n                    </Grid>\n                }\n            </Grid>\n        </div>\n    )\n}\n\nexport default Wrongs;","import React, {useEffect, useState} from 'react';\nimport Quiz from '../components/Quiz';\nimport { Grid, Button } from '@material-ui/core';\nimport './css/Home.css';\nimport { dbService } from '../fbase';\nimport SubmitAnswer from '../components/SubmitAnswer'\nimport Board from '../components/Board';\nimport Wrongs from '../components/Wrongs';\n\nconst Home = ({user, doc_user_id, currentInfo}) => {\n    const {isAdmin} = user\n    const {currentQuiz, showAnswer, showWrongs} = currentInfo;\n    const [quizs, setQuizs] = useState([]);\n    const [isSolved, setIsSolved] = useState(false);\n    const [participants, setParticipants] = useState(0);\n    const [corrects, setCorrects] = useState(0);\n    const [wrongs, setWrongs] = useState([]);\n\n    const setCurrentQuiz = ( idx ) => {\n        dbService.collection('current').doc('current').update({\n            currentQuiz: idx\n        })\n    }\n    const setShowAnswer = (bool) => {\n        dbService.collection('current').doc('current').update({\n            showAnswer: bool\n        })\n    }\n    const onPrevQuizClicked = () => {\n        setCurrentQuiz( currentQuiz - 1 );\n        setShowAnswer(false);\n        dbService.collection('current').doc('current').update({\n            showWrongs: false\n        })\n    }\n    const onNextQuizClicked = () => {\n        setCurrentQuiz( currentQuiz + 1);\n        setShowAnswer(false);\n        dbService.collection('current').doc('current').update({\n            showWrongs: false\n        })\n    }\n    const checkSolved = async () => {\n        if(!quizs.length)\n            return;\n        setIsSolved(user['quiz_'+quizs[currentQuiz].no]);\n    }\n    const isCorrectAnswer = (answer, correctAnswerArr) => correctAnswerArr.includes(answer);\n\n    useEffect( async () => {\n        const quizData = await dbService.collection('quiz').orderBy('no').get();\n        setQuizs(quizData.docs.map(doc => doc.data()));\n    }, [])\n    useEffect( () => {\n        checkSolved()\n    }, [quizs, currentQuiz, user])\n    useEffect( async () => {\n        if(!quizs.length)\n            return;\n        const currentQuizNo = quizs[currentQuiz].no;\n        const correctAnswerArr = (await dbService.collection('quiz').where('no','==',currentQuizNo).get()).docs[0].data().answer;\n        dbService.collection(\"quiz_\"+currentQuizNo).onSnapshot( snapshot => {\n            const answers = snapshot.docs.map( doc => doc.data() );\n            setParticipants(answers.length);\n            let c = [], w = [];\n            answers.map( a => {\n                isCorrectAnswer(a.answer, correctAnswerArr) ? \n                      c = [...c, a]\n                    : w = [...w, a]\n            })\n            setCorrects(c.length);\n            setWrongs(w);\n        })\n    }, [quizs, currentQuiz])\n\n    return (\n        <>\n        <Grid container direction=\"row\" spacing={2} alignItems=\"stretch\">\n            <Grid container item xs={12} md={8} direction=\"row\">\n                <Grid item xs={12}>\n                    {\n                        quizs.length ?\n                        <Quiz quiz={quizs[currentQuiz]} showAnswer={showAnswer} />\n                        : <h6>퀴즈를 가져오는 중입니다...</h6>\n                    }\n                </Grid>\n\n                { isAdmin &&\n                    <Grid container item xs={12} direction=\"row\" justify=\"flex-end\" spacing={2}>\n                        { currentQuiz > 0 && \n                            <Grid item xs={6} md={3}>\n                                <Button variant=\"contained\"\n                                 color=\"primary\" \n                                 fullWidth \n                                 onClick={onPrevQuizClicked}>\n                                     이전 문제\n                                </Button>\n                            </Grid>\n                        }\n                        <Grid item xs={6} md={3}>\n                            {   \n                                showAnswer ? \n                                    ( currentQuiz+1<quizs.length &&\n                                        <Button variant=\"contained\" \n                                            color=\"primary\" \n                                            fullWidth \n                                            onClick={onNextQuizClicked}>\n                                                다음 문제\n                                        </Button>)\n                                : <Button variant=\"contained\" \n                                    color=\"secondary\" \n                                    fullWidth \n                                    onClick={()=>setShowAnswer(true)}>\n                                        정답 공개\n                                    </Button>\n                            }\n                        </Grid>\n                    </Grid>\n                }\n\n                <Grid item xs={12}>\n                    {quizs.length \n                        && !showAnswer\n                        && (\n                            !isSolved ?\n                            <SubmitAnswer no={quizs[currentQuiz].no} user={user} doc_user_id={doc_user_id}/>\n                            : <h4 align=\"center\">정답을 제출하셨습니다</h4>\n                        )}\n                </Grid>\n                <Grid item xs={12}>\n                    {quizs.length && \n                        <Board participants={participants} corrects={corrects}/>}\n                </Grid>\n            </Grid>\n            <Grid item xs={12} md={4}>\n                <Wrongs wrongs={wrongs} isAdmin={isAdmin} showWrongs={showWrongs}/>\n            </Grid>\n        </Grid>\n        </>\n    )\n}\n\nexport default Home;","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Auth from \"../routes/Auth\";\nimport CreateAccount from \"../routes/CreateAccount\";\nimport Home from \"../routes/Home\";\n\nconst AppRouter = ({ isLoggedIn, user, hasAccount, doc_user_id, currentInfo }) => {\n    return (\n        <Router>\n            <Switch>\n            {isLoggedIn? (\n                hasAccount ?\n                <>\n                <Route exact path=\"/\">\n                    <Home user={user} doc_user_id={doc_user_id} currentInfo={currentInfo}/>\n                </Route>\n                </>\n                :\n                <>\n                    <Route exact path=\"/\">\n                        <CreateAccount user={user}/>\n                    </Route>\n                </>\n            ) \n            : (\n            <>\n                <Route exact path=\"/\">\n                    <Auth />\n                </Route>\n            </>\n            )}\n            </Switch>\n        </Router>\n    );\n};\nexport default AppRouter;","import React, { useState, useEffect } from 'react';\nimport { authService, dbService } from '../fbase';\nimport AppRouter from './Router'\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [user, setUser] = useState(null);\n  const [hasAccount, setHasAccount] = useState(false);\n  const [docUserId, setDocUserId] = useState('');\n  const [currentInfo, setCurrentInfo] = useState({currentQuiz:0, showWrongs:false});\n  \n  useEffect(() => {\n      authService.onAuthStateChanged( async u => {\n        if(u){\n          const userinfo = await dbService.collection('userinfo').where('uid','==',u.uid).get();\n          setHasAccount(Boolean(userinfo.docs.length))\n          try{\n            setUser(userinfo.docs[0].data());\n            setDocUserId(userinfo.docs[0].id);\n          }catch(e){\n            setUser(u)\n          }\n        }\n        setInit(true);\n      });\n      dbService.collection('current').doc('current').onSnapshot(data => {\n        setCurrentInfo(data.data())\n      });\n    }, [])\n    useEffect(() => {\n      if(!docUserId)\n        return;\n      dbService.collection('userinfo').doc(docUserId).onSnapshot( newUser => {\n        setUser(newUser.data());\n      })\n    },[docUserId])\n    \n  return (\n    <>\n      { init ? <AppRouter \n          isLoggedIn={Boolean(user)} \n          user={user} \n          hasAccount={hasAccount} \n          doc_user_id={docUserId}\n          currentInfo={currentInfo} /> : \"로딩중입니다!\" }\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
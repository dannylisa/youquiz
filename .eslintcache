[{"/Users/sooyoung/youquiz/src/components/App.js":"1","/Users/sooyoung/youquiz/src/components/Router.js":"2","/Users/sooyoung/youquiz/src/routes/Auth.js":"3","/Users/sooyoung/youquiz/src/routes/Home.js":"4","/Users/sooyoung/youquiz/src/components/Quiz.js":"5","/Users/sooyoung/youquiz/src/routes/CreateAccount.js":"6","/Users/sooyoung/youquiz/src/components/Board.js":"7","/Users/sooyoung/youquiz/src/components/SubmitAnswer.js":"8","/Users/sooyoung/youquiz/src/components/Wrongs.js":"9","/Users/sooyoung/youquiz/src/index.js":"10","/Users/sooyoung/youquiz/src/routes/Draw.js":"11","/Users/sooyoung/youquiz/src/components/ChangeAnswer.js":"12","/Users/sooyoung/youquiz/src/Snow.js":"13","/Users/sooyoung/youquiz/src/fbase.js":"14","/Users/sooyoung/youquiz/src/quizs.js":"15","/Users/sooyoung/youquiz/src/components/Ready.js":"16","/Users/sooyoung/youquiz/src/routes/ShowResult.js":"17","/Users/sooyoung/youquiz/src/components/GetTable.js":"18","/Users/sooyoung/youquiz/src/components/ReaultTable.js":"19","/Users/sooyoung/youquiz/src/components/Navtab.js":"20"},{"size":1781,"mtime":1607766461036,"results":"21","hashOfConfig":"22"},{"size":1499,"mtime":1607521777240,"results":"23","hashOfConfig":"22"},{"size":2973,"mtime":1607357897628,"results":"24","hashOfConfig":"22"},{"size":8355,"mtime":1607842209234,"results":"25","hashOfConfig":"22"},{"size":1299,"mtime":1607172037459,"results":"26","hashOfConfig":"22"},{"size":4944,"mtime":1607764777367,"results":"27","hashOfConfig":"22"},{"size":1888,"mtime":1607693992721,"results":"28","hashOfConfig":"22"},{"size":1709,"mtime":1607769867095,"results":"29","hashOfConfig":"22"},{"size":1773,"mtime":1606931708599,"results":"30","hashOfConfig":"22"},{"size":230,"mtime":1606994256975,"results":"31","hashOfConfig":"22"},{"size":7254,"mtime":1607353563381,"results":"32","hashOfConfig":"22"},{"size":2544,"mtime":1607769900967,"results":"33","hashOfConfig":"22"},{"size":940,"mtime":1607264322719,"results":"34","hashOfConfig":"22"},{"size":781,"mtime":1606624977062,"results":"35","hashOfConfig":"22"},{"size":2222,"mtime":1607342811392,"results":"36","hashOfConfig":"22"},{"size":1768,"mtime":1607772655506,"results":"37","hashOfConfig":"22"},{"size":202,"mtime":1607354379819,"results":"38","hashOfConfig":"22"},{"size":1323,"mtime":1607270925071,"results":"39","hashOfConfig":"22"},{"size":1533,"mtime":1607354399266,"results":"40","hashOfConfig":"22"},{"size":2219,"mtime":1607769883813,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1lsnn2d",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"85"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/Users/sooyoung/youquiz/src/components/App.js",[],["96","97"],"/Users/sooyoung/youquiz/src/components/Router.js",["98"],"/Users/sooyoung/youquiz/src/routes/Auth.js",[],"/Users/sooyoung/youquiz/src/routes/Home.js",["99","100","101","102"],"/Users/sooyoung/youquiz/src/components/Quiz.js",[],"/Users/sooyoung/youquiz/src/routes/CreateAccount.js",[],"/Users/sooyoung/youquiz/src/components/Board.js",["103"],"import { rgbToHex } from '@material-ui/core';\nimport React, { useEffect, useRef } from 'react';\nimport { IoLogoOctocat, IoCheckmarkCircleSharp } from 'react-icons/io5'\n\nconst Gauge = ({score, goal}) => {\n    const perc = score / goal;\n    const gauge_fill = useRef();\n    const gauge_cover = useRef();\n    \n    const setGaugeValue = (value) => {\n        if (value < 0) {\n            value=0\n        }\n        if (value > 1 ) {\n            value=1\n        }\n        const offset = parseInt(55+192*(1-perc));\n        gauge_fill.current.style.background=rgbToHex(`rgb(255,${offset},${offset})`);\n        gauge_fill.current.style.transform = `rotate(${\n            value / 2\n        }turn)`;\n        gauge_cover.current.textContent = score;\n    }\n    useEffect(() => {\n        setGaugeValue(perc);\n    },[score, goal])\n\n    return (\n        <div className=\"gauge\">\n            <div className=\"gauge__body\">\n                <div ref={gauge_fill} className=\"gauge__fill\"></div>\n                <div ref={gauge_cover} className=\"gauge__cover\"></div>\n            </div>\n        </div>\n    )\n}\nconst Board = ({participants, corrects, showAnswer, score, goal}) => {\n    return(\n        <>\n        <div className=\"christmas-striped top slim\"/>\n        <div id=\"board\">\n            <div className=\"current\">\n                { participants ?\n                    <><IoCheckmarkCircleSharp size=\"32\"/>&nbsp; {participants}분 참여하셨습니다!</>\n                    :\n                    <><IoLogoOctocat size=\"32\"/>&nbsp; 아직 참여하신 분이 없습니다. 제일 먼저 퀴즈를 풀어보세요! </>\n                }\n                \n            </div>\n            <div className=\"cumulative\">\n                <Gauge score={score} goal={goal}/>\n            </div>\n        </div>\n        <div className=\"christmas-striped bottom slim\"/>\n        \n        </>\n    )\n}\n\nexport default Board;",["104","105"],"/Users/sooyoung/youquiz/src/components/SubmitAnswer.js",["106"],"import React, { useState } from 'react';\nimport { Grid, Button, FormControl, Input, InputLabel } from '@material-ui/core';\nimport { dbService } from '../fbase';\n\nconst SubmitAnswer = ({no, user, doc_user_id}) => {\n    const {uid, name, tel, isAdmin} = user;\n    const [answer, setAnswer] = useState('');\n    const onInputChange = event => {\n        const {target:{value}} = event;\n        setAnswer(value)\n    }\n    const onSubmitClicked = async () => {\n        if(answer==''){\n            alert('정답을 입력해주세요.');\n            return;\n        }\n        const answerObj = {\n            uid,\n            name,\n            tel,\n            answer,\n            isAdmin\n        }\n        !isAdmin && alert('정답이 제출되었습니다.');\n        await dbService.collection('quiz_'+no).add(answerObj);\n        await dbService.collection('userinfo').doc(doc_user_id).update({\n            ['quiz_'+no]: true\n        })\n    }\n    return(\n        <div id=\"submitAnswer\">\n            <Grid container direction=\"row\" spacing={2} alignItems=\"center\">\n                <Grid item xs={9}>\n                    <FormControl fullWidth>\n                        <InputLabel htmlFor=\"ans-input\">정답</InputLabel>\n                        <Input id=\"ans-input\" type=\"text\" aria-describedby=\"ans-helper\" name=\"answer\" onChange={onInputChange} value={answer}/>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={3}>\n                    <Button onClick={onSubmitClicked} fullWidth variant=\"contained\" color=\"primary\">\n                        제출\n                    </Button>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default SubmitAnswer;",["107","108"],"/Users/sooyoung/youquiz/src/components/Wrongs.js",[],"/Users/sooyoung/youquiz/src/index.js",[],"/Users/sooyoung/youquiz/src/routes/Draw.js",["109","110","111","112","113","114"],"import React, { useState, useEffect } from 'react';\nimport quizs from '../quizs';\nimport Navtab from '../components/Navtab';\nimport GetTable from '../components/GetTable';\nimport { Grid, Button } from '@material-ui/core';\nimport {IoRefresh} from 'react-icons/io5';\nimport './css/Draw.css';\nimport { dbService } from '../fbase';\nimport ResultTable from '../components/ReaultTable';\n\nconst Draw = () => {\n    const [init, setInit] = useState(false);\n    const [drawingTabIdx, setDrawingTabIdx] = useState(0);\n    const [isDrawingCorrector, setIsDrawingCorrector] = useState(0);\n    const [isDrawingFinished, setIsDrawingFinished] = useState(false);\n    const [isDrawable, setIsDrawable] = useState(true);\n    const [correctorInfos, setCorrectorInfos] = useState([]);\n    const [participantInfos, setParticipantInfos] = useState([]);\n    \n    const tabnames = [...quizs.map(q => `Quiz ${q.no}`), \"참여자\"];\n    const hideTel = tel => {\n        if(tel ===\"\" || !tel)\n            return \"-\"\n        else if(tel.length <=4)\n            return tel\n        else\n            return '***-****-'+tel.slice(-4);\n    }\n    const isCorrectAnswer = (answer, correctAnswerArr) => correctAnswerArr.includes(answer.toLowerCase());\n    // 퀴즈별 정답자 및 전체 참여자 데이터 가져오기\n    useEffect( async ()=>{\n        let dbCors =[];\n        await Promise.all( quizs.map( async (quiz) => {\n            const {no, answers} = quiz;\n            const participantsObj = (await dbService.collection(\"quiz_\"+no).get())\n                                    .docs.map( doc => doc.data());\n            dbCors=[...dbCors, participantsObj\n                                .filter( p => isCorrectAnswer( p.answer, answers ))\n                                .map( p => [p.name, p.tel])];\n        }))\n        let part = [];\n        (await dbService.collection('userinfo').get())\n            .docs.map( doc => doc.data())\n            .map( p => {\n                part = [...part, [p.name, p.tel]];\n            })\n        setCorrectorInfos(dbCors);\n        setParticipantInfos(part);\n        setInit(true)\n    },[])\n\n    const rand = (start, end) => Math.floor((Math.random() * (end-start+1)) + start);\n    const hasPerson = (peopleArr, person) => (\n        peopleArr.some( p => p[0]==person[0] && p[1] == person[1])\n    );\n    \n    const initiateDrawMachine = () => {\n        isDrawingCorrector === 0 ?\n            setIsDrawingCorrector(1)\n            : setIsDrawable(false);\n        setIsDrawingFinished(false);\n    }\n    const draw = async (curr) => {\n        // 정답자\n        let winners=[];\n        const type = curr === 0 ? 'corrector' : 'participant';\n        if(!curr){\n            correctorInfos.map( (quizCorrectors, idx) => {\n                let winner;\n                do {\n                    winner = quizCorrectors[rand(0, quizCorrectors.length-1)];\n                } while (hasPerson(winners, winner));\n                winners=[...winners, winner];\n            })\n        }\n        //참여자 전체\n        else{\n            // const corWinners = Object.values((await dbService.collection('current').doc('corrector').get()).data());\n            for(let i=0; i<10; i++){\n                let winner;\n                do {\n                    winner = participantInfos[rand(0, participantInfos.length-1)];\n                } while (hasPerson(winners, winner));\n                // } while (hasPerson([...corWinners,...winners], winner));\n                winners=[...winners, winner];\n            }\n        }\n        await new Promise((resolve, reject) => {\n            resolve('');\n        }).then(() => {\n            winners.map( async (w, idx) => {\n                setTimeout( () => {\n                    const no =parseInt(idx)+1;\n                    dbService.collection(\"current\").doc(type).update({\n                        [no]: w\n                    });\n                }, 500+1000*idx)\n                \n            })\n        }).then( () => {\n            setTimeout(() => setIsDrawingFinished(true), 500+winners.length*1000)\n        })\n        \n    }\n    \n    return(\n        <Grid container spacing={2}>\n            <Grid item xs={12} md={6}>\n                <Navtab tabnames={tabnames} tabIdx={drawingTabIdx} tabController={setDrawingTabIdx}>\n                    {\n                        [...correctorInfos, participantInfos].map( (c, idx) => (\n                            <GetTable \n                                key={idx}\n                                title={[\"이름\", \"전화번호\"]}\n                                content={c.map( (([name, tel]) => [name, hideTel(tel)]))}\n                                onBlankAltText={idx===correctorInfos.length ? \"참여자가 없습니다.\" : \"정답자가 없습니다.\"}/>\n                        ))\n                    }\n                </Navtab>\n            </Grid>\n            <Grid item xs={12} md={6}>\n                <div className=\"christmas-striped top\"/>\n                <div className=\"draw\">\n                    <Grid container alignContent=\"center\" spacing={1} className=\"draw-machine\">\n                        <Grid item xs={12}>\n                            <Button \n                                variant=\"contained\"\n                                color=\"primary\"\n                                fullWidth\n                                disabled={!isDrawable}\n                                onClick={ () => draw(isDrawingCorrector)}>\n                                    {!isDrawingCorrector ? \n                                        \"정답자 6인 추첨\" : \"참여자 10인 추첨\"}\n                            </Button>\n                        </Grid>\n                        <Grid container item xs={12}>\n                            <Grid item xs={6}>\n                                <Button \n                                variant=\"contained\"\n                                disabled={!isDrawingFinished}\n                                fullWidth\n                                color=\"secondary\"\n                                onClick={ () => {\n                                    setIsDrawingFinished(false);\n                                    draw(isDrawingCorrector)\n                                }}>\n                                    <IoRefresh size=\"16\"/>\n                                </Button>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Button \n                                    variant=\"contained\"\n                                    disabled={!isDrawingFinished}\n                                    fullWidth\n                                    color=\"default\"\n                                    onClick={initiateDrawMachine}>\n                                        {!isDrawingCorrector ? \n                                        \"다음 추첨\" : \"확인\"}\n                                </Button>\n                            </Grid>\n                        </Grid>\n                        \n                    </Grid>\n                    <ResultTable tabIdx={isDrawingCorrector} tabController={setIsDrawingCorrector}/>\n                </div>\n                <div className=\"christmas-striped bottom\"/>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Draw;","/Users/sooyoung/youquiz/src/components/ChangeAnswer.js",["115","116","117"],"import React, { useEffect, useState } from 'react';\nimport { Button, Input, FormControl } from '@material-ui/core';\nimport { dbService } from '../fbase';\n\n\nconst ChangeAnswer = ({user, no}) => {\n    const [myAnswer, setMyAnswer] = useState('');\n    const [newAnswer, setNewAnswer] = useState('');\n    const [answerCorrectionMode, setAnswerCorrectionMode] = useState(false);\n    const toggleAnswerCorrectionMode = () => setAnswerCorrectionMode( prev => !prev);\n    const onInputChange = (event) => {\n        const {target: {value}} = event;\n        setNewAnswer(value);\n    }\n    const correctAnswer = async (event) => {\n        event.preventDefault();\n        if(newAnswer==''){\n            alert('변경하실 정답을 입력해주세요.');\n            return;\n        }\n        if(newAnswer !== myAnswer){\n            const dbAns = await dbService.collection('quiz_'+no).where('uid','==',user.uid).get();\n            await dbService.collection('quiz_'+no).doc(dbAns.docs[0].id).update({\n                answer:newAnswer\n            })\n            setMyAnswer(newAnswer);\n        }\n        toggleAnswerCorrectionMode();\n    }\n    useEffect(async () => {\n        if(user['quiz_'+no]){\n            const dbAns = (await dbService.collection('quiz_'+no).where('uid','==',user.uid).get()).docs[0].data().answer;\n            setMyAnswer(dbAns);\n            setNewAnswer(dbAns);\n        }\n    }, [])\n\n    return (\n        <div className=\"already-submit-message\">\n            {\n                answerCorrectionMode ?\n                <>\n                <FormControl style={{alignItems:\"center\", textAlign:\"center\"}}>\n                    <Input id=\"correct-input\" \n                        type=\"text\" \n                        aria-describedby=\"correct-helper\" \n                        name=\"correct\"\n                        onChange={onInputChange}   \n                        value={newAnswer}\n                        style={{width:\"70%\", textAlign:\"center\"}}/>\n                </FormControl>\n                <Button onClick={correctAnswer} variant=\"contained\" color=\"secondary\" >\n                    수정\n                </Button>\n                </>\n                :\n                <>\n                <div className=\"my-answer\">\n                    <h3>내 정답 : {myAnswer}</h3>\n                </div>\n                <Button onClick={toggleAnswerCorrectionMode} variant=\"contained\" color=\"primary\">\n                    바꾸기\n                </Button>\n                </>\n            }\n        </div>\n    )\n}\n\nexport default ChangeAnswer;",["118","119"],"/Users/sooyoung/youquiz/src/Snow.js",[],["120","121"],"/Users/sooyoung/youquiz/src/fbase.js",[],"/Users/sooyoung/youquiz/src/quizs.js",["122"],"const quiz = (no, question, answers) => ({\n    no,\n    question,\n    answers\n})\nexport default [\n    quiz(1, \n        `북미 항공 우주 방위 사령부(NORAD)는 1995년부터 매년 크리스마스 이브마다 <u>'이 사람'</u>의 위치를 추적한다고 합니다.\n        NORAD 공식계정에서는 작년 12월 24일 <u>'이 사람'</u>이 한국과 일본 상공을 지나갔다는 글을 게시하기도 했는데요, 그렇다면 NORAD가 추적하는 <u>'이 사람'</u>은 누구일까요?`,\n        [\"산타클로스\", \"산타 클로스\", \"산타\", \"산타 할아버지\", \"산타할아버지\", \"santa\", \"santa claus\", \"santaclaus\"]),\n    quiz(2,\n        `한석규, 심은하 주연의 영화 <❍월의 크리스마스>(1998)는 개봉 후 22년이 흐른 지금까지도 역대 한국 멜로영화 최고의 걸작이라 평가받는 영화입니다.\n        2013년 관객들이 뽑은 '다시 보고싶은 명작' 1위에 선정되어 재개봉되기도 했는데요, <u>❍에 들어갈 숫자</u>는 무엇일까요? `,\n        [\"8\", \"8월\"]),\n    quiz(3,\n        `크리스마스가 되면 \"X-mas\"라는 문구를 종종 볼 수 있습니다. \n        \"X-mas\"의 'X'는 <u>이 나라</u> 말로 \"그리스도\"를 의미하는 단어의 앞 글자를 딴 것이라고 하는데요, 그렇다면 <u>이 나라</u>는 어느 나라일까요?`,\n        [\"그리스\", \"greece\"]),\n    quiz(4,\n        `<u>이 노래</u>는 1986년 영국의 팝 듀오 Wham!이 부른 노래로, 아리아나 그란데, 테일러 스위프트 등 유명 가수들이 리메이크하여 더욱 유명해진 크리스마스 캐롤입니다. <u>이 노래</u>는 무엇일까요?`,\n        [\"last christmas\", \"lastchristmas\", \"라스트 크리스마스\", \"라스트크리스마스\", \"래스트 크리스마스\"]),\n    quiz(5,\n        `[난센스 퀴즈]<br/>크리스마스에 중국집에서 <u>먹으면 안 되는 음식</u>은 무엇일까요?`,\n        [\"울면\"]),\n    quiz(6,\n        `아기 예수님께서는 베들레헴이라는 작은 시골마을의 말구유에서 나셨습니다. 그렇다면 히브리어로 <u>\"베들레헴\"의 뜻</u>은 무엇일까요?`,\n        [\"빵집\", \"bakery\", \"떡집\"]),\n];",["123","124"],"/Users/sooyoung/youquiz/src/components/Ready.js",[],["125","126"],"/Users/sooyoung/youquiz/src/routes/ShowResult.js",[],"/Users/sooyoung/youquiz/src/components/GetTable.js",[],["127","128"],"/Users/sooyoung/youquiz/src/components/ReaultTable.js",["129"],"import React, { useEffect, useState } from 'react';\nimport GetTable from './GetTable';\nimport { dbService } from '../fbase';\nimport Navtab from './Navtab';\n\nconst ResultTable = ({tabIdx, tabController}) => {\n    const [correctorWinner, setCorrectorWinner] = useState([]);\n    const [participantWinner, setParticipantWinner] = useState([]);\n    useEffect(async ()=>{\n        dbService.collection('current').doc('corrector').onSnapshot( snapshot => {\n            const winners = snapshot.data();\n            setCorrectorWinner( winners ? Object.entries(winners).map( ([idx, infoArr]) => [idx, infoArr[0]]) : []);\n        })\n        dbService.collection('current').doc('participant').onSnapshot( snapshot => {\n            const winners = snapshot.data();\n            setParticipantWinner( winners ? Object.entries(winners).map( ([idx, infoArr]) => [idx, infoArr[0]]) : []);\n        })\n    },[])\n    \n    return(\n        <Navtab \n            tabnames={[\"정답자 6인\",\"참여자 10인\"]}\n            tabIdx={tabIdx || null}\n            tabController={tabController || null}>\n            <GetTable \n                title={[\"퀴즈\", \"당첨자\"]}\n                content={correctorWinner}\n                onBlankAltText=\"당첨자를 곧 추첨합니다!\"\n                />\n            <GetTable \n                title={[\"번호\", \"당첨자\"]}\n                content={participantWinner}\n                onBlankAltText=\"참여자 중 10명을 추첨합니다!\"\n                />\n        </Navtab>\n    )\n}\n\nexport default ResultTable;","/Users/sooyoung/youquiz/src/components/Navtab.js",[],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":2,"column":47,"nodeType":"136","messageId":"137","endLine":2,"endColumn":55},{"ruleId":"138","severity":1,"message":"139","line":79,"column":8,"nodeType":"140","endLine":79,"endColumn":27,"suggestions":"141"},{"ruleId":"138","severity":1,"message":"142","line":96,"column":8,"nodeType":"140","endLine":96,"endColumn":21,"suggestions":"143"},{"ruleId":"138","severity":1,"message":"144","line":100,"column":8,"nodeType":"140","endLine":100,"endColumn":20,"suggestions":"145"},{"ruleId":"138","severity":1,"message":"146","line":103,"column":8,"nodeType":"140","endLine":103,"endColumn":19,"suggestions":"147"},{"ruleId":"138","severity":1,"message":"148","line":26,"column":7,"nodeType":"140","endLine":26,"endColumn":20,"suggestions":"149"},{"ruleId":"130","replacedBy":"150"},{"ruleId":"132","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":13,"column":18,"nodeType":"154","messageId":"155","endLine":13,"endColumn":20},{"ruleId":"130","replacedBy":"156"},{"ruleId":"132","replacedBy":"157"},{"ruleId":"134","severity":1,"message":"158","line":12,"column":12,"nodeType":"136","messageId":"137","endLine":12,"endColumn":16},{"ruleId":"138","severity":1,"message":"159","line":31,"column":16,"nodeType":"160","endLine":50,"endColumn":6},{"ruleId":"161","severity":1,"message":"162","line":44,"column":21,"nodeType":"160","messageId":"163","endLine":44,"endColumn":23},{"ruleId":"152","severity":1,"message":"153","line":54,"column":34,"nodeType":"154","messageId":"155","endLine":54,"endColumn":36},{"ruleId":"152","severity":1,"message":"153","line":54,"column":54,"nodeType":"154","messageId":"155","endLine":54,"endColumn":56},{"ruleId":"161","severity":1,"message":"162","line":68,"column":55,"nodeType":"160","messageId":"163","endLine":68,"endColumn":57},{"ruleId":"152","severity":1,"message":"153","line":17,"column":21,"nodeType":"154","messageId":"155","endLine":17,"endColumn":23},{"ruleId":"138","severity":1,"message":"159","line":30,"column":15,"nodeType":"160","endLine":36,"endColumn":6},{"ruleId":"138","severity":1,"message":"164","line":36,"column":8,"nodeType":"140","endLine":36,"endColumn":10,"suggestions":"165"},{"ruleId":"130","replacedBy":"166"},{"ruleId":"132","replacedBy":"167"},{"ruleId":"130","replacedBy":"168"},{"ruleId":"132","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":6,"column":1,"nodeType":"172","endLine":28,"endColumn":3},{"ruleId":"130","replacedBy":"173"},{"ruleId":"132","replacedBy":"174"},{"ruleId":"130","replacedBy":"175"},{"ruleId":"132","replacedBy":"176"},{"ruleId":"130","replacedBy":"177"},{"ruleId":"132","replacedBy":"178"},{"ruleId":"138","severity":1,"message":"159","line":9,"column":15,"nodeType":"160","endLine":18,"endColumn":6},"no-native-reassign",["179"],"no-negated-in-lhs",["180"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkSolved'. Either include it or remove the dependency array.","ArrayExpression",["181"],"React Hook useEffect has a missing dependency: 'playBabam'. Either include it or remove the dependency array.",["182"],"React Hook useEffect has a missing dependency: 'playSarr'. Either include it or remove the dependency array.",["183"],"React Hook useEffect has a missing dependency: 'playDodongtak'. Either include it or remove the dependency array.",["184"],"React Hook useEffect has missing dependencies: 'perc' and 'setGaugeValue'. Either include them or remove the dependency array.",["185"],["179"],["180"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["179"],["180"],"'init' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has missing dependencies: 'no' and 'user'. Either include them or remove the dependency array.",["186"],["179"],["180"],["179"],["180"],"import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration",["179"],["180"],["179"],["180"],["179"],["180"],"no-global-assign","no-unsafe-negation",{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},"Update the dependencies array to be: [checkSolved, currentQuiz, user]",{"range":"199","text":"200"},"Update the dependencies array to be: [currentQuiz, playBabam]",{"range":"201","text":"202"},"Update the dependencies array to be: [playSarr, showAnswer]",{"range":"203","text":"204"},"Update the dependencies array to be: [playDodongtak, showScore]",{"range":"205","text":"206"},"Update the dependencies array to be: [score, goal, setGaugeValue, perc]",{"range":"207","text":"208"},"Update the dependencies array to be: [no, user]",{"range":"209","text":"210"},[2982,3001],"[checkSolved, currentQuiz, user]",[3587,3600],"[currentQuiz, playBabam]",[3667,3679],"[playSarr, showAnswer]",[3749,3760],"[playDodongtak, showScore]",[800,813],"[score, goal, setGaugeValue, perc]",[1366,1368],"[no, user]"]
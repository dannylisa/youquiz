[{"/Users/sooyoung/youquiz/src/components/App.js":"1","/Users/sooyoung/youquiz/src/components/Router.js":"2","/Users/sooyoung/youquiz/src/routes/Auth.js":"3","/Users/sooyoung/youquiz/src/routes/Home.js":"4","/Users/sooyoung/youquiz/src/components/Quiz.js":"5","/Users/sooyoung/youquiz/src/routes/CreateAccount.js":"6","/Users/sooyoung/youquiz/src/components/Board.js":"7","/Users/sooyoung/youquiz/src/components/SubmitAnswer.js":"8","/Users/sooyoung/youquiz/src/components/Wrongs.js":"9","/Users/sooyoung/youquiz/src/index.js":"10","/Users/sooyoung/youquiz/src/routes/Draw.js":"11","/Users/sooyoung/youquiz/src/components/ChangeAnswer.js":"12","/Users/sooyoung/youquiz/src/Snow.js":"13","/Users/sooyoung/youquiz/src/fbase.js":"14","/Users/sooyoung/youquiz/src/quizs.js":"15"},{"size":1581,"mtime":1606970604319,"results":"16","hashOfConfig":"17"},{"size":1366,"mtime":1606750184737,"results":"18","hashOfConfig":"17"},{"size":2978,"mtime":1606995741176,"results":"19","hashOfConfig":"17"},{"size":7599,"mtime":1607173271597,"results":"20","hashOfConfig":"17"},{"size":1299,"mtime":1607172037459,"results":"21","hashOfConfig":"17"},{"size":2623,"mtime":1606750638124,"results":"22","hashOfConfig":"23"},{"size":1183,"mtime":1606932375161,"results":"24","hashOfConfig":"17"},{"size":1688,"mtime":1607178348214,"results":"25","hashOfConfig":"17"},{"size":1773,"mtime":1606931708599,"results":"26","hashOfConfig":"17"},{"size":230,"mtime":1606994256975,"results":"27","hashOfConfig":"17"},{"size":10590,"mtime":1607143003579,"results":"28","hashOfConfig":"17"},{"size":2504,"mtime":1606932908890,"results":"29","hashOfConfig":"17"},{"size":939,"mtime":1607143102147,"results":"30","hashOfConfig":"17"},{"size":781,"mtime":1606624977062,"results":"31","hashOfConfig":"17"},{"size":2265,"mtime":1607178416075,"results":"32","hashOfConfig":"17"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"1lsnn2d",{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1x5x8sc",{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/sooyoung/youquiz/src/components/App.js",[],["70","71"],"/Users/sooyoung/youquiz/src/components/Router.js",["72"],"/Users/sooyoung/youquiz/src/routes/Auth.js",[],"/Users/sooyoung/youquiz/src/routes/Home.js",["73","74","75","76"],"/Users/sooyoung/youquiz/src/components/Quiz.js",[],"/Users/sooyoung/youquiz/src/routes/CreateAccount.js",[],"/Users/sooyoung/youquiz/src/components/Board.js",["77","78"],"import React from 'react';\nimport { IoLogoOctocat, IoCheckmarkCircleSharp } from 'react-icons/io5'\n\n\nconst Board = ({participants, corrects}) => {\n    return(\n        <>\n        <div className=\"christmas-striped top slim\"/>\n        <div id=\"board\">\n            <h4>\n                { participants && corrects ?\n                    <IoCheckmarkCircleSharp size=\"28\"/>\n                    :\n                     <IoLogoOctocat size=\"28\"/>\n                }\n                &nbsp;\n                <span>\n\n                {\n                    participants == 0 ?\n                    \"아직 참여하신 분이 없습니다. 제일 먼저 퀴즈를 풀어보세요!\"\n                    :\n                    corrects == 0 ?\n                    `참여해주신 ${participants}분 중 아직 정답자가 없습니다! 가장 먼저 정답을 맞혀봐요!`\n                    :\n                    `참여해주신 ${participants}분 중에서 ${corrects}분이 정답을 맞히셨습니다!`\n                }\n                </span>\n                \n            </h4>\n        </div>\n        <div className=\"christmas-striped bottom slim\"/>\n        </>\n    )\n}\n\nexport default Board;",["79","80"],"/Users/sooyoung/youquiz/src/components/SubmitAnswer.js",["81","82","83"],"/Users/sooyoung/youquiz/src/components/Wrongs.js",[],["84","85"],"/Users/sooyoung/youquiz/src/index.js",[],"/Users/sooyoung/youquiz/src/routes/Draw.js",["86","87","88","89","90","91","92","93","94","95"],"import React, { useState, useEffect } from 'react';\nimport { Paper, Grid, Button, AppBar, Tabs, Tab, Table, \n    TableContainer, TableHead, TableBody, TableRow, TableCell } from '@material-ui/core';\nimport {IoRefresh} from 'react-icons/io5';\nimport './css/Draw.css';\nimport { dbService } from '../fbase';\n\nconst Draw = () => {\n    const [init, setInit] = useState(false);\n    const [quizNos, setQuizNos] = useState([])\n    const [quizCorrectorInfos, setQuizCorrectorInfos] = useState([]);\n    const [value, setValue]= useState(0);\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n      };\n    \n\n    const useDrawMachine = () => {\n        const initialDrawer = \"번 문제의 당첨자는 누구일까요?\";\n        const [currentDrawQuiz, setCurrentDrawQuiz] = useState(0)\n        const [currentDrawer, setCurrentDrawer] = useState(1+initialDrawer);\n        const [drewList, setDrewList] = useState([]);\n        const [isDrawingFinished, setIsDrawingFinished] = useState(false);\n        const [isDrew, setIsDrew] = useState(false);\n        const rand = (start, end) => Math.floor((Math.random() * (end-start+1)) + start);\n        const drawing = async (list, repetitions) => {\n            let x = 0;\n            let intervalID;\n            intervalID = setInterval(() => {\n                new Promise((resolve, reject) => {\n                    resolve('')\n                }).then( () => {\n                    const display = `${list[rand(0,list.length-1)].name}`;\n                    setCurrentDrawer(display);\n                    if (++x == repetitions){\n                        clearInterval(intervalID);\n                        setTimeout(()=> setIsDrawingFinished(true), 500);\n                    }\n                })\n            }, 100);\n        }\n\n        const draw = async () => {\n            setIsDrawingFinished(false);\n            const peopleList = quizCorrectorInfos[currentDrawQuiz];\n            if(!(peopleList.length))\n                return;\n            await drawing(peopleList, 20)\n            setIsDrew(true)\n        }\n        const initiateDrawMachine = (currentQuiz) => {\n            setCurrentDrawer((currentQuiz+1)+initialDrawer);\n            setCurrentDrawQuiz(currentQuiz);\n            setIsDrawingFinished(false);\n            setIsDrew(false);\n        }\n        const updateDrewList = (num, winner) => setDrewList( \n            prev => [...prev.filter(([no, name]) => no!==num),\n                     [num, winner]]\n        )\n        return [currentDrawer, currentDrawQuiz, isDrawingFinished, isDrew, draw, initiateDrawMachine, drewList, updateDrewList];\n    }\n    const [currentDrawer, currentDrawQuiz, isDrawingFinished,isDrew, draw, initiateDrawMachine, drewList, updateDrewList] = useDrawMachine();\n    \n    const isCorrectAnswer = (answer, correctAnswerArr) => correctAnswerArr.includes(answer);\n   \n    // 퀴즈별 정답자 데이터 가져오기\n    useEffect(async ()=>{\n        const quizData = await dbService.collection('quiz').orderBy('no').get();\n        const dbQuizs = quizData.docs.map(doc => doc.data());\n        setQuizNos(dbQuizs.map(q => q.no).sort());\n        \n        let correctorInfos =[];\n        await Promise.all( dbQuizs.map( async (quiz) => {\n            const {no, answer} = quiz;\n            const participantsObj = (await dbService.collection(\"quiz_\"+no).get())\n                                    .docs.map( doc => doc.data());\n            correctorInfos=[...correctorInfos, participantsObj.filter( p => isCorrectAnswer( p.answer, answer ))];\n        }))\n        setQuizCorrectorInfos(correctorInfos);\n        setInit(true)\n    },[])\n    const hideName = name => {\n        if(name ==\"\" || !name)\n            return \"익명\"\n        else if(name.length ==1)\n            return name\n        else if(name.length==2)\n            return name[0]+'*';\n        else if(name.length==3)\n            return name[0]+'*'+name[2];\n        else\n            return name[0]+'**'+name[name.length-1];\n    }\n    const hideTel = tel => {\n        if(tel ==\"\" || !tel)\n            return \"-\"\n        else if(tel.length <=4)\n            return tel\n        else\n            return '***-****-'+tel.slice(-4);\n    }\n\n    const TabPanel = ({ children, value, index, ...other }) => {\n        return (\n          <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`scrollable-auto-tabpanel-${index}`}\n            aria-labelledby={`scrollable-auto-tab-${index}`}\n            {...other}\n          >\n            {value == index && children }\n          </div>\n        );\n    }\n    const a11yProps = index =>({\n        id: `scrollable-auto-tab-${index}`,\n        'aria-controls': `scrollable-auto-tabpanel-${index}`,\n      })\n     \n    const GetTable = ({title, content, onBlankAltText}) => (\n        <TableContainer component={Paper}>\n            <Table aria-label=\"simple table\">\n            { content.length ?\n                    <>\n                    <TableHead>\n                        <TableRow>\n                            {\n                                title.map( (t, idx) => <TableCell key={idx} align=\"center\"> {t} </TableCell>)\n                            }\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {content.map((row, idx) => (\n                            <TableRow key={idx}>\n                                { row.map( (c, idx) => (\n                                        <TableCell key={idx} component=\"th\" scope=\"row\" align=\"center\">{c}</TableCell>\n                                ))}\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                    </>\n                :\n                    <TableBody>\n                        <TableRow>\n                            <TableCell align=\"center\">{onBlankAltText}</TableCell>\n                        </TableRow>\n                    </TableBody>\n                }\n            </Table>\n        </TableContainer>\n    )\n    const GetPeopleInfoComponent = ({peopleInfo}) => {\n        const title = [\"이름\", \"전화번호\"];\n        const content = peopleInfo.map( p => [p.name, hideTel(p.tel)]);\n        return GetTable({\n            title, \n            content, \n            onBlankAltText:\"정답자가 없습니다 ㅠㅠㅠㅠ\"});  \n    }\n\n    return (\n        <Grid container direction=\"row\" spacing={2} alignItems=\"flex-start\">\n            <Grid container item xs={12} md={6} spacing={1}>\n                <Grid item xs={12}>\n                {\n                    init ? \n                    <>\n                    <AppBar position=\"static\" color=\"default\">\n                        <Tabs\n                            value={currentDrawQuiz}\n                            onChange={handleChange}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            variant=\"scrollable\"\n                            scrollButtons=\"auto\"\n                            aria-label=\"scrollable auto tabs\">\n                            {\n                                quizNos.map( (no, idx) => \n                                    <Tab key={idx} label={`Quiz ${no}`}  {...a11yProps(idx)} />\n                                )\n                            }\n                        </Tabs>\n                    </AppBar>\n                    {\n                        quizNos.map((no, idx) => (\n                            <TabPanel key={idx} value={currentDrawQuiz} index={idx}>\n                                <GetPeopleInfoComponent peopleInfo={quizCorrectorInfos[idx]}/>\n                            </TabPanel>\n                        ))\n                    }\n                    </>\n                    : \"정답자 데이터를 가져오는 중입니다...\"\n                }\n                </Grid>\n            </Grid>\n            <Grid item xs={12} md={6}>\n                <div className=\"christmas-striped top\"/>\n                <div className=\"draw\">\n                    <div className=\"draw-machine\">\n                        <Paper className=\"drawer\" variant=\"elevation\" elevation={3}>\n                            <h2>{currentDrawer}</h2>\n                            {/* className={isDrawingFinished && \"finished\"} */}\n                        </Paper>\n                        <div className=\"draw-btns\">\n                            { isDrew  ?\n                                <Button \n                                    onClick={draw} \n                                    variant=\"contained\" \n                                    color=\"secondary\"\n                                    disabled={!isDrawingFinished}\n                                    >\n                                    <IoRefresh size=\"18\"/>\n                                </Button>\n                                :\n                                <Button/>\n                                }\n                            {isDrew ?\n                                <Button \n                                    onClick={()=>{\n                                        currentDrawQuiz<(quizNos.length-1) && initiateDrawMachine(currentDrawQuiz+1);\n                                        updateDrewList(currentDrawQuiz+1, currentDrawer);\n                                    }} \n                                    variant=\"contained\" \n                                    disabled={!isDrawingFinished}\n                                    color=\"primary\">\n                                    {currentDrawQuiz<quizNos.length-1 ? \"다음 추첨\" : \"확인\"}\n                                </Button>\n                            :\n                                <Button onClick={draw} variant=\"contained\" color=\"primary\">\n                                    추첨\n                                </Button>\n                            }\n                        </div>\n                    </div>\n                    <div className=\"congrats-message\">\n                        <h2 align=\"center\">{isDrawingFinished && `${currentDrawer}님, 당첨을 축하드립니다!`}</h2>\n                    </div>\n                    <div className=\"drawed-list\">\n                        <GetTable \n                            title={[\"퀴즈\", \"당첨자\"]}\n                            content={drewList}\n                            onBlankAltText=\"첫 당첨자를 곧 추첨합니다!\"\n                            />\n                    </div>\n                </div>\n                <div className=\"christmas-striped bottom\"/>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Draw;","/Users/sooyoung/youquiz/src/components/ChangeAnswer.js",["96","97","98","99"],"import React, { useEffect, useState } from 'react';\nimport { Button, InputLabel, Input, FormControl } from '@material-ui/core';\nimport { dbService } from '../fbase';\n\n\nconst ChangeAnswer = ({user, no}) => {\n    const [myAnswer, setMyAnswer] = useState('');\n    const [newAnswer, setNewAnswer] = useState('');\n    const [answerCorrectionMode, setAnswerCorrectionMode] = useState(false);\n    const toggleAnswerCorrectionMode = () => setAnswerCorrectionMode( prev => !prev);\n    const onInputChange = (event) => {\n        const {target: {value}} = event;\n        setNewAnswer(value);\n    }\n    const correctAnswer = async (event) => {\n        event.preventDefault();\n        if(newAnswer==''){\n            alert('변경하실 정답을 입력해주세요.');\n            return;\n        }\n        if(newAnswer !== myAnswer){\n            const dbAns = await dbService.collection('quiz_'+no).where('uid','==',user.uid).get();\n            await dbService.collection('quiz_'+no).doc(dbAns.docs[0].id).update({\n                answer:newAnswer\n            })\n            setMyAnswer(newAnswer);\n        }\n        toggleAnswerCorrectionMode();\n    }\n    useEffect(async () => {\n        const dbAns = (await dbService.collection('quiz_'+no).where('uid','==',user.uid).get()).docs[0].data().answer;\n        setMyAnswer(dbAns);\n        setNewAnswer(dbAns);\n    }, [])\n\n    return (\n        <div className=\"already-submit-message\">\n            {\n                answerCorrectionMode ?\n                <>\n                <FormControl style={{alignItems:\"center\", textAlign:\"center\"}}>\n                    <Input id=\"correct-input\" \n                        type=\"text\" \n                        aria-describedby=\"correct-helper\" \n                        name=\"correct\"\n                        onChange={onInputChange}   \n                        value={newAnswer}\n                        style={{width:\"70%\", textAlign:\"center\"}}/>\n                </FormControl>\n                <Button onClick={correctAnswer} variant=\"contained\" color=\"secondary\" >\n                    수정\n                </Button>\n                </>\n                :\n                <>\n                <div className=\"my-answer\">\n                    <h3>내 정답 : {myAnswer}</h3>\n                </div>\n                <Button onClick={toggleAnswerCorrectionMode} variant=\"contained\" color=\"primary\">\n                    바꾸기\n                </Button>\n                </>\n            }\n        </div>\n    )\n}\n\nexport default ChangeAnswer;",["100","101"],"/Users/sooyoung/youquiz/src/Snow.js",[],"/Users/sooyoung/youquiz/src/fbase.js",[],"/Users/sooyoung/youquiz/src/quizs.js",["102"],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":2,"column":47,"nodeType":"109","messageId":"110","endLine":2,"endColumn":55},{"ruleId":"111","severity":1,"message":"112","line":67,"column":8,"nodeType":"113","endLine":67,"endColumn":34,"suggestions":"114"},{"ruleId":"111","severity":1,"message":"115","line":68,"column":16,"nodeType":"116","endLine":82,"endColumn":6},{"ruleId":"117","severity":1,"message":"118","line":74,"column":39,"nodeType":"116","messageId":"119","endLine":74,"endColumn":41},{"ruleId":"111","severity":1,"message":"120","line":85,"column":8,"nodeType":"113","endLine":85,"endColumn":20,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":20,"column":34,"nodeType":"124","messageId":"125","endLine":20,"endColumn":36},{"ruleId":"122","severity":1,"message":"123","line":23,"column":30,"nodeType":"124","messageId":"125","endLine":23,"endColumn":32},{"ruleId":"103","replacedBy":"126"},{"ruleId":"105","replacedBy":"127"},{"ruleId":"107","severity":1,"message":"128","line":2,"column":9,"nodeType":"109","messageId":"110","endLine":2,"endColumn":14},{"ruleId":"107","severity":1,"message":"129","line":2,"column":62,"nodeType":"109","messageId":"110","endLine":2,"endColumn":76},{"ruleId":"122","severity":1,"message":"123","line":13,"column":18,"nodeType":"124","messageId":"125","endLine":13,"endColumn":20},{"ruleId":"103","replacedBy":"130"},{"ruleId":"105","replacedBy":"131"},{"ruleId":"107","severity":1,"message":"132","line":12,"column":12,"nodeType":"109","messageId":"110","endLine":12,"endColumn":17},{"ruleId":"122","severity":1,"message":"123","line":35,"column":29,"nodeType":"124","messageId":"125","endLine":35,"endColumn":31},{"ruleId":"111","severity":1,"message":"115","line":68,"column":15,"nodeType":"116","endLine":82,"endColumn":6},{"ruleId":"107","severity":1,"message":"133","line":83,"column":11,"nodeType":"109","messageId":"110","endLine":83,"endColumn":19},{"ruleId":"122","severity":1,"message":"123","line":84,"column":17,"nodeType":"124","messageId":"125","endLine":84,"endColumn":19},{"ruleId":"122","severity":1,"message":"123","line":86,"column":29,"nodeType":"124","messageId":"125","endLine":86,"endColumn":31},{"ruleId":"122","severity":1,"message":"123","line":88,"column":28,"nodeType":"124","messageId":"125","endLine":88,"endColumn":30},{"ruleId":"122","severity":1,"message":"123","line":90,"column":28,"nodeType":"124","messageId":"125","endLine":90,"endColumn":30},{"ruleId":"122","severity":1,"message":"123","line":96,"column":16,"nodeType":"124","messageId":"125","endLine":96,"endColumn":18},{"ruleId":"122","severity":1,"message":"123","line":113,"column":20,"nodeType":"124","messageId":"125","endLine":113,"endColumn":22},{"ruleId":"107","severity":1,"message":"134","line":2,"column":18,"nodeType":"109","messageId":"110","endLine":2,"endColumn":28},{"ruleId":"122","severity":1,"message":"123","line":17,"column":21,"nodeType":"124","messageId":"125","endLine":17,"endColumn":23},{"ruleId":"111","severity":1,"message":"115","line":30,"column":15,"nodeType":"116","endLine":34,"endColumn":6},{"ruleId":"111","severity":1,"message":"135","line":34,"column":8,"nodeType":"113","endLine":34,"endColumn":10,"suggestions":"136"},{"ruleId":"103","replacedBy":"137"},{"ruleId":"105","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":6,"column":1,"nodeType":"141","endLine":31,"endColumn":3},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkSolved'. Either include it or remove the dependency array. Outer scope values like 'quizs' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["144"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has a missing dependency: 'play'. Either include it or remove the dependency array.",["145"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["142"],["143"],"'Paper' is defined but never used.","'FormHelperText' is defined but never used.",["142"],["143"],"'value' is assigned a value but never used.","'hideName' is assigned a value but never used.","'InputLabel' is defined but never used.","React Hook useEffect has missing dependencies: 'no' and 'user.uid'. Either include them or remove the dependency array.",["146"],["142"],["143"],"import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},"Update the dependencies array to be: [currentQuiz, user, checkSolved]",{"range":"153","text":"154"},"Update the dependencies array to be: [play, showAnswer]",{"range":"155","text":"156"},"Update the dependencies array to be: [no, user.uid]",{"range":"157","text":"158"},[2303,2329],"[currentQuiz, user, checkSolved]",[2987,2999],"[play, showAnswer]",[1326,1328],"[no, user.uid]"]